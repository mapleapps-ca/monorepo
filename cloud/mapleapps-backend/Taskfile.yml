version: "3"

tasks:
  dev:
    desc: Start the backend in developer mode
    cmds:
      - docker-compose -p mapleapps_backend -f docker-compose.dev.yml up --watch

  end:
    desc: Stop the backend in developer mode
    cmds:
      - docker-compose -p mapleapps_backend -f docker-compose.dev.yml down

  console:
    desc: Open console in (developer mode) running backend
    cmds:
      - docker exec -it mapleapps_backend bash

  cqlsh:
    desc: Open the Cassandra DB SQL client in running Cassandra container
    cmds:
      - docker exec -it mapleapps_cassandra_node1 cqlsh

  login:
    desc: (DevOps only) Command will log in your developer's machine with the private docker container registry.
    cmds:
      - docker login registry.digitalocean.com

  logout:
    desc: (DevOps only) Command will log out of the private docker container registry. (Important step if you are using other private docker registries)
    cmds:
      - docker logout registry.digitalocean.com

  deploy:
    desc: (DevOps only) Command will build the production container of this project and deploy to the private docker container registry.
    cmds:
      - docker build -f Dockerfile --rm -t registry.digitalocean.com/ssp/mapleapps_backend:prod --platform linux/amd64 .
      - docker tag registry.digitalocean.com/ssp/mapleapps_backend:prod registry.digitalocean.com/ssp/mapleapps_backend:prod
      - docker push registry.digitalocean.com/ssp/mapleapps_backend:prod

  deployqa:
    desc: (DevOps only) Command will build the quality assurance (QA) container of this project and deploy to the private docker container registry.
    cmds:
      - docker build -f Dockerfile --rm -t registry.digitalocean.com/ssp/mapleapps_backend:qa --platform linux/amd64 .
      - docker tag registry.digitalocean.com/ssp/mapleapps_backend:qa registry.digitalocean.com/ssp/mapleapps_backend:qa
      - docker push registry.digitalocean.com/ssp/mapleapps_backend:qa

  clean:
    cmds:
      - go clean -cache
      - go clean -modcache

  vendor:
    desc: Save all the libraries into our code repository
    cmds:
      - go mod tidy
      - go mod download
      - go mod vendor

  upgradelib:
    desc: Update all the golang libraries (https://stackoverflow.com/a/67202539)
    cmds:
      - go get -u ./...

  undelast:
    desc: Undue last commit which was not pushed. Special thanks to https://www.nobledesktop.com/learn/git/undo-changes.
    cmds:
      - git reset --soft HEAD~

  genkey:
    desc: Generate a unique key.
    cmds:
      - openssl rand -hex 64.

  osxlisten:
    desc: "See what apps apps are running and listing to what ports. Aftwords use for example: kill -9 4097"
    cmds:
      - sudo lsof -nPi -sTCP:LISTEN

  llmcat:
    desc: "Concatinate our project into LLM friendly single text (dependent on third-party app called `crev`)"
    cmds:
      - crev bundle

  vet:
    desc: "Run Go's static code analysis tool to find potential issues"
    cmds:
      - echo "============================================================"
      - echo "RUNNING GO VET CODE ANALYSIS"
      - echo "============================================================"
      - go vet ./...
      - echo "Go vet completed successfully!"
    silent: false

  lint:
    desc: "Run golint to check for style mistakes"
    cmds:
      - echo "============================================================"
      - echo "CHECKING CODE STYLE WITH GOLINT"
      - echo "============================================================"
      - golint ./...
      - echo "Golint completed!"
    silent: false

  format:
    desc: "Format code and manage imports automatically"
    cmds:
      - echo "============================================================"
      - echo "FORMATTING CODE AND UPDATING IMPORTS"
      - echo "============================================================"
      - goimports -w .
      - echo "Code formatting completed!"
    silent: false

  check:
    desc: "Run all code quality checks (format, lint, vet)"
    cmds:
      - task: format
      - task: lint
      - task: vet
    silent: false

  mockgen:
    desc: "Generate our backend mock files"
    cmds:
      # Third-Party Packages
      # - go tool mockgen -source=github.com/gocql/gocql -destination=pkg/mocks/mock_gocql_session.go -package=mocks Session,Query,Iter,Batch
      #################
      # PKG
      #################
      - go tool mockgen -source=pkg/emailer/mailgun/interface.go -destination=pkg/mocks/mock_mailgun.go -package=mocks
      - go tool mockgen -source=pkg/distributedmutex/distributelocker.go -destination=pkg/mocks/mock_distributedmutex.go -package=mocks
      - go tool mockgen -source=pkg/security/password/password.go -destination=pkg/mocks/mock_security_password.go -package=mocks
      - go tool mockgen -source=pkg/security/jwt/jwt.go -destination=pkg/mocks/mock_security_jwt.go -package=mocks
      - go tool mockgen -source=pkg/storage/cache/cassandracache/cassandracache.go -destination=pkg/mocks/mock_storage_cache_cassandracache.go -package=mocks
      - go tool mockgen -source=pkg/storage/cache/twotiercache/twotiercache.go -destination=pkg/mocks/mock_storage_cache_twotiercache.go -package=mocks
      - go tool mockgen -source=pkg/storage/database/cassandradb/cassandradb.go -destination=pkg/mocks/mock_storage_database_cassandra_db.go -package=mocks
      - go tool mockgen -source=pkg/storage/database/cassandradb/migration.go -destination=pkg/mocks/mock_storage_database_cassandra_migration.go -package=mocks
      - go tool mockgen -source=pkg/storage/memory/inmemory/memory.go -destination=pkg/mocks/mock_storage_memory_inmemory.go -package=mocks
      - go tool mockgen -source=pkg/storage/memory/redis/redis.go -destination=pkg/mocks/mock_storage_memory_redis.go -package=mocks
      - go tool mockgen -source=pkg/storage/object/s3/s3.go -destination=pkg/mocks/mock_storage_object_s3.go -package=mocks
      #################
      # IAM Module
      #################
      ## Domain Entities
      #------------------
      - go tool mockgen -source=internal/iam/domain/auth/interface.go -destination=internal/iam/mocks/mock_repository_auth.go -package=mocks
      - go tool mockgen -source=internal/iam/domain/federateduser/interface.go -destination=internal/iam/mocks/mock_repository_federateduser.go -package=mocks
      - go tool mockgen -source=internal/iam/domain/recovery/interface.go -destination=internal/iam/mocks/mock_repository_recovery.go -package=mocks
      ## Repo
      #------------------
      - go tool mockgen -source=internal/iam/repo/templatedemailer/interface.go -destination=internal/iam/mocks/mock_repository_templatedemailer.go -package=mocks
      ## Use-Cases
      #------------------
      ### Emailer
      - go tool mockgen -source=internal/iam/usecase/emailer/sendloginott.go -destination=internal/iam/mocks/mock_usecase._sendloginottgo -package=mocks
      # - go tool mockgen -source=internal/iam/usecase/emailer/sendpassreset.go -destination=internal/iam/mocks/mock_usecase_sendpassreset.go -package=mocks #TODO
      - go tool mockgen -source=internal/iam/usecase/emailer/sendverificationemail.go -destination=internal/iam/mocks/mock_usecase_sendverificationemail.go -package=mocks
      ### Federated User
      - go tool mockgen -source=internal/iam/usecase/federateduser/create.go -destination=internal/iam/mocks/mock_usecase_federateduser_create.go -package=mocks
      - go tool mockgen -source=internal/iam/usecase/federateduser/deletebyemail.go -destination=internal/iam/mocks/mock_usecase_federateduser_deletebyemail.go -package=mocks
      - go tool mockgen -source=internal/iam/usecase/federateduser/deletebyid.go -destination=internal/iam/mocks/mock_usecase_federateduser_deletebyid.go -package=mocks
      - go tool mockgen -source=internal/iam/usecase/federateduser/deletebyid.go -destination=internal/iam/mocks/mock_usecase_federateduser_deletebyid.go -package=mocks
      - go tool mockgen -source=internal/iam/usecase/federateduser/getbyemail.go -destination=internal/iam/mocks/mock_usecase_federateduser_getbyemail.go -package=mocks
      - go tool mockgen -source=internal/iam/usecase/federateduser/getbyid.go -destination=internal/iam/mocks/mock_usecase_federateduser_getbyid.go -package=mocks
      - go tool mockgen -source=internal/iam/usecase/federateduser/getbysesid.go -destination=internal/iam/mocks/mock_usecase_federateduser_getbysesid.go -package=mocks
      - go tool mockgen -source=internal/iam/usecase/federateduser/getbyverify.go -destination=internal/iam/mocks/mock_usecase_federateduser_getbyverify.go -package=mocks
      - go tool mockgen -source=internal/iam/usecase/federateduser/update.go -destination=internal/iam/mocks/mock_usecase_federateduser_update.go -package=mocks
      - go tool mockgen -source=internal/iam/usecase/recovery/initiate.go -destination=internal/iam/mocks/mock_usecase_recovery_initiate.go -package=mocks
      - go tool mockgen -source=internal/iam/usecase/recovery/verify.go -destination=internal/iam/mocks/mock_usecase_recovery_verify.go -package=mocks
      - go tool mockgen -source=internal/iam/usecase/recovery/complete.go -destination=internal/iam/mocks/mock_usecase_recovery_complete.go -package=mocks
      ## Service
      #------------------
      ###
      # TODO
      #
      ###################
      # MapleFile Module
      ###################
      ## Domain
      #------------------
      - go tool mockgen -source=internal/maplefile/domain/collection/interface.go -destination=internal/maplefile/mocks/mock_repository_collection.go -package=mocks
      - go tool mockgen -source=internal/maplefile/domain/file/interface.go -destination=internal/maplefile/mocks/mock_repository_file.go -package=mocks
      - go tool mockgen -source=internal/maplefile/domain/user/interface.go -destination=internal/maplefile/mocks/mock_repository_user.go -package=mocks
      ## Use-Cases
      #------------------
      ###
      # TODO
      #
      ## Service
      #------------------
      ###
      # TODO
