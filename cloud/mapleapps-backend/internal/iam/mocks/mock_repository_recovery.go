// Code generated by MockGen. DO NOT EDIT.
// Source: internal/iam/domain/recovery/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/iam/domain/recovery/interface.go -destination=internal/iam/mocks/mock_repository_recovery.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gocql "github.com/gocql/gocql"
	recovery "github.com/mapleapps-ca/monorepo/cloud/mapleapps-backend/internal/iam/domain/recovery"
	gomock "go.uber.org/mock/gomock"
)

// MockRecoveryRepository is a mock of RecoveryRepository interface.
type MockRecoveryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRecoveryRepositoryMockRecorder
	isgomock struct{}
}

// MockRecoveryRepositoryMockRecorder is the mock recorder for MockRecoveryRepository.
type MockRecoveryRepositoryMockRecorder struct {
	mock *MockRecoveryRepository
}

// NewMockRecoveryRepository creates a new mock instance.
func NewMockRecoveryRepository(ctrl *gomock.Controller) *MockRecoveryRepository {
	mock := &MockRecoveryRepository{ctrl: ctrl}
	mock.recorder = &MockRecoveryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecoveryRepository) EXPECT() *MockRecoveryRepositoryMockRecorder {
	return m.recorder
}

// CleanupExpiredSessions mocks base method.
func (m *MockRecoveryRepository) CleanupExpiredSessions(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupExpiredSessions", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupExpiredSessions indicates an expected call of CleanupExpiredSessions.
func (mr *MockRecoveryRepositoryMockRecorder) CleanupExpiredSessions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupExpiredSessions", reflect.TypeOf((*MockRecoveryRepository)(nil).CleanupExpiredSessions), ctx)
}

// CountFailedAttemptsInWindow mocks base method.
func (m *MockRecoveryRepository) CountFailedAttemptsInWindow(ctx context.Context, email string, window time.Duration) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountFailedAttemptsInWindow", ctx, email, window)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountFailedAttemptsInWindow indicates an expected call of CountFailedAttemptsInWindow.
func (mr *MockRecoveryRepositoryMockRecorder) CountFailedAttemptsInWindow(ctx, email, window any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountFailedAttemptsInWindow", reflect.TypeOf((*MockRecoveryRepository)(nil).CountFailedAttemptsInWindow), ctx, email, window)
}

// CreateRecoveryAttempt mocks base method.
func (m *MockRecoveryRepository) CreateRecoveryAttempt(ctx context.Context, attempt *recovery.RecoveryAttempt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecoveryAttempt", ctx, attempt)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRecoveryAttempt indicates an expected call of CreateRecoveryAttempt.
func (mr *MockRecoveryRepositoryMockRecorder) CreateRecoveryAttempt(ctx, attempt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecoveryAttempt", reflect.TypeOf((*MockRecoveryRepository)(nil).CreateRecoveryAttempt), ctx, attempt)
}

// CreateRecoveryKeyRotation mocks base method.
func (m *MockRecoveryRepository) CreateRecoveryKeyRotation(ctx context.Context, rotation *recovery.RecoveryKeyRotation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecoveryKeyRotation", ctx, rotation)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRecoveryKeyRotation indicates an expected call of CreateRecoveryKeyRotation.
func (mr *MockRecoveryRepositoryMockRecorder) CreateRecoveryKeyRotation(ctx, rotation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecoveryKeyRotation", reflect.TypeOf((*MockRecoveryRepository)(nil).CreateRecoveryKeyRotation), ctx, rotation)
}

// CreateRecoverySession mocks base method.
func (m *MockRecoveryRepository) CreateRecoverySession(ctx context.Context, session *recovery.RecoverySession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecoverySession", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRecoverySession indicates an expected call of CreateRecoverySession.
func (mr *MockRecoveryRepositoryMockRecorder) CreateRecoverySession(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecoverySession", reflect.TypeOf((*MockRecoveryRepository)(nil).CreateRecoverySession), ctx, session)
}

// DeleteRecoverySession mocks base method.
func (m *MockRecoveryRepository) DeleteRecoverySession(ctx context.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecoverySession", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecoverySession indicates an expected call of DeleteRecoverySession.
func (mr *MockRecoveryRepositoryMockRecorder) DeleteRecoverySession(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecoverySession", reflect.TypeOf((*MockRecoveryRepository)(nil).DeleteRecoverySession), ctx, sessionID)
}

// GetRecentRecoveryAttempts mocks base method.
func (m *MockRecoveryRepository) GetRecentRecoveryAttempts(ctx context.Context, userID gocql.UUID, limit int) ([]*recovery.RecoveryAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentRecoveryAttempts", ctx, userID, limit)
	ret0, _ := ret[0].([]*recovery.RecoveryAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentRecoveryAttempts indicates an expected call of GetRecentRecoveryAttempts.
func (mr *MockRecoveryRepositoryMockRecorder) GetRecentRecoveryAttempts(ctx, userID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentRecoveryAttempts", reflect.TypeOf((*MockRecoveryRepository)(nil).GetRecentRecoveryAttempts), ctx, userID, limit)
}

// GetRecoveryAttemptByID mocks base method.
func (m *MockRecoveryRepository) GetRecoveryAttemptByID(ctx context.Context, id gocql.UUID) (*recovery.RecoveryAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecoveryAttemptByID", ctx, id)
	ret0, _ := ret[0].(*recovery.RecoveryAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecoveryAttemptByID indicates an expected call of GetRecoveryAttemptByID.
func (mr *MockRecoveryRepositoryMockRecorder) GetRecoveryAttemptByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecoveryAttemptByID", reflect.TypeOf((*MockRecoveryRepository)(nil).GetRecoveryAttemptByID), ctx, id)
}

// GetRecoveryKeyRotationHistory mocks base method.
func (m *MockRecoveryRepository) GetRecoveryKeyRotationHistory(ctx context.Context, userID gocql.UUID, limit int) ([]*recovery.RecoveryKeyRotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecoveryKeyRotationHistory", ctx, userID, limit)
	ret0, _ := ret[0].([]*recovery.RecoveryKeyRotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecoveryKeyRotationHistory indicates an expected call of GetRecoveryKeyRotationHistory.
func (mr *MockRecoveryRepositoryMockRecorder) GetRecoveryKeyRotationHistory(ctx, userID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecoveryKeyRotationHistory", reflect.TypeOf((*MockRecoveryRepository)(nil).GetRecoveryKeyRotationHistory), ctx, userID, limit)
}

// GetRecoverySessionByID mocks base method.
func (m *MockRecoveryRepository) GetRecoverySessionByID(ctx context.Context, sessionID string) (*recovery.RecoverySession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecoverySessionByID", ctx, sessionID)
	ret0, _ := ret[0].(*recovery.RecoverySession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecoverySessionByID indicates an expected call of GetRecoverySessionByID.
func (mr *MockRecoveryRepositoryMockRecorder) GetRecoverySessionByID(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecoverySessionByID", reflect.TypeOf((*MockRecoveryRepository)(nil).GetRecoverySessionByID), ctx, sessionID)
}

// UpdateRecoveryAttempt mocks base method.
func (m *MockRecoveryRepository) UpdateRecoveryAttempt(ctx context.Context, attempt *recovery.RecoveryAttempt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecoveryAttempt", ctx, attempt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRecoveryAttempt indicates an expected call of UpdateRecoveryAttempt.
func (mr *MockRecoveryRepositoryMockRecorder) UpdateRecoveryAttempt(ctx, attempt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecoveryAttempt", reflect.TypeOf((*MockRecoveryRepository)(nil).UpdateRecoveryAttempt), ctx, attempt)
}

// UpdateRecoverySession mocks base method.
func (m *MockRecoveryRepository) UpdateRecoverySession(ctx context.Context, session *recovery.RecoverySession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecoverySession", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRecoverySession indicates an expected call of UpdateRecoverySession.
func (mr *MockRecoveryRepositoryMockRecorder) UpdateRecoverySession(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecoverySession", reflect.TypeOf((*MockRecoveryRepository)(nil).UpdateRecoverySession), ctx, session)
}
