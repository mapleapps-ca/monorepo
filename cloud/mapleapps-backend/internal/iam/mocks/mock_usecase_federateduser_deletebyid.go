// Code generated by MockGen. DO NOT EDIT.
// Source: internal/iam/usecase/federateduser/deletebyid.go
//
// Generated by this command:
//
//	mockgen -source=internal/iam/usecase/federateduser/deletebyid.go -destination=internal/iam/mocks/mock_usecase_federateduser_deletebyid.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gocql "github.com/gocql/gocql"
	gomock "go.uber.org/mock/gomock"
)

// MockFederatedUserDeleteByIDUseCase is a mock of FederatedUserDeleteByIDUseCase interface.
type MockFederatedUserDeleteByIDUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockFederatedUserDeleteByIDUseCaseMockRecorder
	isgomock struct{}
}

// MockFederatedUserDeleteByIDUseCaseMockRecorder is the mock recorder for MockFederatedUserDeleteByIDUseCase.
type MockFederatedUserDeleteByIDUseCaseMockRecorder struct {
	mock *MockFederatedUserDeleteByIDUseCase
}

// NewMockFederatedUserDeleteByIDUseCase creates a new mock instance.
func NewMockFederatedUserDeleteByIDUseCase(ctrl *gomock.Controller) *MockFederatedUserDeleteByIDUseCase {
	mock := &MockFederatedUserDeleteByIDUseCase{ctrl: ctrl}
	mock.recorder = &MockFederatedUserDeleteByIDUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFederatedUserDeleteByIDUseCase) EXPECT() *MockFederatedUserDeleteByIDUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockFederatedUserDeleteByIDUseCase) Execute(ctx context.Context, id gocql.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockFederatedUserDeleteByIDUseCaseMockRecorder) Execute(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockFederatedUserDeleteByIDUseCase)(nil).Execute), ctx, id)
}
