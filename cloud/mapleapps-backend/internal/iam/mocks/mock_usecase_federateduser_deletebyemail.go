// Code generated by MockGen. DO NOT EDIT.
// Source: internal/iam/usecase/federateduser/deletebyemail.go
//
// Generated by this command:
//
//	mockgen -source=internal/iam/usecase/federateduser/deletebyemail.go -destination=internal/iam/mocks/mock_usecase_federateduser_deletebyemail.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFederatedUserDeleteFederatedUserByEmailUseCase is a mock of FederatedUserDeleteFederatedUserByEmailUseCase interface.
type MockFederatedUserDeleteFederatedUserByEmailUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockFederatedUserDeleteFederatedUserByEmailUseCaseMockRecorder
	isgomock struct{}
}

// MockFederatedUserDeleteFederatedUserByEmailUseCaseMockRecorder is the mock recorder for MockFederatedUserDeleteFederatedUserByEmailUseCase.
type MockFederatedUserDeleteFederatedUserByEmailUseCaseMockRecorder struct {
	mock *MockFederatedUserDeleteFederatedUserByEmailUseCase
}

// NewMockFederatedUserDeleteFederatedUserByEmailUseCase creates a new mock instance.
func NewMockFederatedUserDeleteFederatedUserByEmailUseCase(ctrl *gomock.Controller) *MockFederatedUserDeleteFederatedUserByEmailUseCase {
	mock := &MockFederatedUserDeleteFederatedUserByEmailUseCase{ctrl: ctrl}
	mock.recorder = &MockFederatedUserDeleteFederatedUserByEmailUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFederatedUserDeleteFederatedUserByEmailUseCase) EXPECT() *MockFederatedUserDeleteFederatedUserByEmailUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockFederatedUserDeleteFederatedUserByEmailUseCase) Execute(ctx context.Context, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockFederatedUserDeleteFederatedUserByEmailUseCaseMockRecorder) Execute(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockFederatedUserDeleteFederatedUserByEmailUseCase)(nil).Execute), ctx, email)
}
