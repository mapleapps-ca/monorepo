// Code generated by MockGen. DO NOT EDIT.
// Source: internal/iam/usecase/emailer/sendloginott.go
//
// Generated by this command:
//
//	mockgen -source=internal/iam/usecase/emailer/sendloginott.go -destination=internal/iam/mocks/mock_usecase._sendloginottgo -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSendLoginOTTEmailUseCase is a mock of SendLoginOTTEmailUseCase interface.
type MockSendLoginOTTEmailUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSendLoginOTTEmailUseCaseMockRecorder
	isgomock struct{}
}

// MockSendLoginOTTEmailUseCaseMockRecorder is the mock recorder for MockSendLoginOTTEmailUseCase.
type MockSendLoginOTTEmailUseCaseMockRecorder struct {
	mock *MockSendLoginOTTEmailUseCase
}

// NewMockSendLoginOTTEmailUseCase creates a new mock instance.
func NewMockSendLoginOTTEmailUseCase(ctrl *gomock.Controller) *MockSendLoginOTTEmailUseCase {
	mock := &MockSendLoginOTTEmailUseCase{ctrl: ctrl}
	mock.recorder = &MockSendLoginOTTEmailUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendLoginOTTEmailUseCase) EXPECT() *MockSendLoginOTTEmailUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockSendLoginOTTEmailUseCase) Execute(ctx context.Context, monolithModule int, email, oneTimeToken, firstName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, monolithModule, email, oneTimeToken, firstName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockSendLoginOTTEmailUseCaseMockRecorder) Execute(ctx, monolithModule, email, oneTimeToken, firstName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSendLoginOTTEmailUseCase)(nil).Execute), ctx, monolithModule, email, oneTimeToken, firstName)
}
