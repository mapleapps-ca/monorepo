// Code generated by MockGen. DO NOT EDIT.
// Source: internal/iam/usecase/recovery/verify.go
//
// Generated by this command:
//
//	mockgen -source=internal/iam/usecase/recovery/verify.go -destination=internal/iam/mocks/mock_usecase_recovery_verify.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	recovery "github.com/mapleapps-ca/monorepo/cloud/mapleapps-backend/internal/iam/usecase/recovery"
	gomock "go.uber.org/mock/gomock"
)

// MockVerifyRecoveryUseCase is a mock of VerifyRecoveryUseCase interface.
type MockVerifyRecoveryUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockVerifyRecoveryUseCaseMockRecorder
	isgomock struct{}
}

// MockVerifyRecoveryUseCaseMockRecorder is the mock recorder for MockVerifyRecoveryUseCase.
type MockVerifyRecoveryUseCaseMockRecorder struct {
	mock *MockVerifyRecoveryUseCase
}

// NewMockVerifyRecoveryUseCase creates a new mock instance.
func NewMockVerifyRecoveryUseCase(ctrl *gomock.Controller) *MockVerifyRecoveryUseCase {
	mock := &MockVerifyRecoveryUseCase{ctrl: ctrl}
	mock.recorder = &MockVerifyRecoveryUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVerifyRecoveryUseCase) EXPECT() *MockVerifyRecoveryUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockVerifyRecoveryUseCase) Execute(ctx context.Context, req *recovery.VerifyRecoveryRequest) (*recovery.VerifyRecoveryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, req)
	ret0, _ := ret[0].(*recovery.VerifyRecoveryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockVerifyRecoveryUseCaseMockRecorder) Execute(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockVerifyRecoveryUseCase)(nil).Execute), ctx, req)
}
