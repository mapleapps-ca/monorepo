// Code generated by MockGen. DO NOT EDIT.
// Source: internal/iam/usecase/recovery/initiate.go
//
// Generated by this command:
//
//	mockgen -source=internal/iam/usecase/recovery/initiate.go -destination=internal/iam/mocks/mock_usecase_recovery_initiate.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	recovery "github.com/mapleapps-ca/monorepo/cloud/mapleapps-backend/internal/iam/domain/recovery"
	recovery0 "github.com/mapleapps-ca/monorepo/cloud/mapleapps-backend/internal/iam/usecase/recovery"
	gomock "go.uber.org/mock/gomock"
)

// MockInitiateRecoveryUseCase is a mock of InitiateRecoveryUseCase interface.
type MockInitiateRecoveryUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockInitiateRecoveryUseCaseMockRecorder
	isgomock struct{}
}

// MockInitiateRecoveryUseCaseMockRecorder is the mock recorder for MockInitiateRecoveryUseCase.
type MockInitiateRecoveryUseCaseMockRecorder struct {
	mock *MockInitiateRecoveryUseCase
}

// NewMockInitiateRecoveryUseCase creates a new mock instance.
func NewMockInitiateRecoveryUseCase(ctrl *gomock.Controller) *MockInitiateRecoveryUseCase {
	mock := &MockInitiateRecoveryUseCase{ctrl: ctrl}
	mock.recorder = &MockInitiateRecoveryUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInitiateRecoveryUseCase) EXPECT() *MockInitiateRecoveryUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockInitiateRecoveryUseCase) Execute(ctx context.Context, email string, method recovery.RecoveryMethod) (*recovery0.InitiateRecoveryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, email, method)
	ret0, _ := ret[0].(*recovery0.InitiateRecoveryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockInitiateRecoveryUseCaseMockRecorder) Execute(ctx, email, method any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockInitiateRecoveryUseCase)(nil).Execute), ctx, email, method)
}
