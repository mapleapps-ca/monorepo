// Code generated by MockGen. DO NOT EDIT.
// Source: internal/iam/usecase/federateduser/getbysesid.go
//
// Generated by this command:
//
//	mockgen -source=internal/iam/usecase/federateduser/getbysesid.go -destination=internal/iam/mocks/mock_usecase_federateduser_getbysesid.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	federateduser "github.com/mapleapps-ca/monorepo/cloud/mapleapps-backend/internal/iam/domain/federateduser"
	gomock "go.uber.org/mock/gomock"
)

// MockFederatedUserGetBySessionIDUseCase is a mock of FederatedUserGetBySessionIDUseCase interface.
type MockFederatedUserGetBySessionIDUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockFederatedUserGetBySessionIDUseCaseMockRecorder
	isgomock struct{}
}

// MockFederatedUserGetBySessionIDUseCaseMockRecorder is the mock recorder for MockFederatedUserGetBySessionIDUseCase.
type MockFederatedUserGetBySessionIDUseCaseMockRecorder struct {
	mock *MockFederatedUserGetBySessionIDUseCase
}

// NewMockFederatedUserGetBySessionIDUseCase creates a new mock instance.
func NewMockFederatedUserGetBySessionIDUseCase(ctrl *gomock.Controller) *MockFederatedUserGetBySessionIDUseCase {
	mock := &MockFederatedUserGetBySessionIDUseCase{ctrl: ctrl}
	mock.recorder = &MockFederatedUserGetBySessionIDUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFederatedUserGetBySessionIDUseCase) EXPECT() *MockFederatedUserGetBySessionIDUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockFederatedUserGetBySessionIDUseCase) Execute(ctx context.Context, sessionID string) (*federateduser.FederatedUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, sessionID)
	ret0, _ := ret[0].(*federateduser.FederatedUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockFederatedUserGetBySessionIDUseCaseMockRecorder) Execute(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockFederatedUserGetBySessionIDUseCase)(nil).Execute), ctx, sessionID)
}
