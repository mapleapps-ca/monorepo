// Code generated by MockGen. DO NOT EDIT.
// Source: internal/iam/usecase/emailer/sendverificationemail.go
//
// Generated by this command:
//
//	mockgen -source=internal/iam/usecase/emailer/sendverificationemail.go -destination=internal/iam/mocks/mock_usecase_sendverificationemail.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	federateduser "github.com/mapleapps-ca/monorepo/cloud/mapleapps-backend/internal/iam/domain/federateduser"
	gomock "go.uber.org/mock/gomock"
)

// MockSendFederatedUserVerificationEmailUseCase is a mock of SendFederatedUserVerificationEmailUseCase interface.
type MockSendFederatedUserVerificationEmailUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSendFederatedUserVerificationEmailUseCaseMockRecorder
	isgomock struct{}
}

// MockSendFederatedUserVerificationEmailUseCaseMockRecorder is the mock recorder for MockSendFederatedUserVerificationEmailUseCase.
type MockSendFederatedUserVerificationEmailUseCaseMockRecorder struct {
	mock *MockSendFederatedUserVerificationEmailUseCase
}

// NewMockSendFederatedUserVerificationEmailUseCase creates a new mock instance.
func NewMockSendFederatedUserVerificationEmailUseCase(ctrl *gomock.Controller) *MockSendFederatedUserVerificationEmailUseCase {
	mock := &MockSendFederatedUserVerificationEmailUseCase{ctrl: ctrl}
	mock.recorder = &MockSendFederatedUserVerificationEmailUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendFederatedUserVerificationEmailUseCase) EXPECT() *MockSendFederatedUserVerificationEmailUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockSendFederatedUserVerificationEmailUseCase) Execute(ctx context.Context, monolithModule int, user *federateduser.FederatedUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, monolithModule, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockSendFederatedUserVerificationEmailUseCaseMockRecorder) Execute(ctx, monolithModule, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSendFederatedUserVerificationEmailUseCase)(nil).Execute), ctx, monolithModule, user)
}
