// Code generated by MockGen. DO NOT EDIT.
// Source: internal/iam/usecase/federateduser/create.go
//
// Generated by this command:
//
//	mockgen -source=internal/iam/usecase/federateduser/create.go -destination=internal/iam/mocks/mock_usecase_federateduser_create.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	federateduser "github.com/mapleapps-ca/monorepo/cloud/mapleapps-backend/internal/iam/domain/federateduser"
	gomock "go.uber.org/mock/gomock"
)

// MockFederatedUserCreateUseCase is a mock of FederatedUserCreateUseCase interface.
type MockFederatedUserCreateUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockFederatedUserCreateUseCaseMockRecorder
	isgomock struct{}
}

// MockFederatedUserCreateUseCaseMockRecorder is the mock recorder for MockFederatedUserCreateUseCase.
type MockFederatedUserCreateUseCaseMockRecorder struct {
	mock *MockFederatedUserCreateUseCase
}

// NewMockFederatedUserCreateUseCase creates a new mock instance.
func NewMockFederatedUserCreateUseCase(ctrl *gomock.Controller) *MockFederatedUserCreateUseCase {
	mock := &MockFederatedUserCreateUseCase{ctrl: ctrl}
	mock.recorder = &MockFederatedUserCreateUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFederatedUserCreateUseCase) EXPECT() *MockFederatedUserCreateUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockFederatedUserCreateUseCase) Execute(ctx context.Context, user *federateduser.FederatedUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockFederatedUserCreateUseCaseMockRecorder) Execute(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockFederatedUserCreateUseCase)(nil).Execute), ctx, user)
}
