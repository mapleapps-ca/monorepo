// Code generated by MockGen. DO NOT EDIT.
// Source: internal/iam/domain/auth/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/iam/domain/auth/interface.go -destination=internal/iam/mocks/mock_repository_auth.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	auth "github.com/mapleapps-ca/monorepo/cloud/mapleapps-backend/internal/iam/domain/auth"
	gomock "go.uber.org/mock/gomock"
)

// MockTokenEncryptionService is a mock of TokenEncryptionService interface.
type MockTokenEncryptionService struct {
	ctrl     *gomock.Controller
	recorder *MockTokenEncryptionServiceMockRecorder
	isgomock struct{}
}

// MockTokenEncryptionServiceMockRecorder is the mock recorder for MockTokenEncryptionService.
type MockTokenEncryptionServiceMockRecorder struct {
	mock *MockTokenEncryptionService
}

// NewMockTokenEncryptionService creates a new mock instance.
func NewMockTokenEncryptionService(ctrl *gomock.Controller) *MockTokenEncryptionService {
	mock := &MockTokenEncryptionService{ctrl: ctrl}
	mock.recorder = &MockTokenEncryptionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenEncryptionService) EXPECT() *MockTokenEncryptionServiceMockRecorder {
	return m.recorder
}

// EncryptTokens mocks base method.
func (m *MockTokenEncryptionService) EncryptTokens(accessToken, refreshToken string, publicKey []byte, accessExpiry, refreshExpiry time.Time) (*auth.EncryptedTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptTokens", accessToken, refreshToken, publicKey, accessExpiry, refreshExpiry)
	ret0, _ := ret[0].(*auth.EncryptedTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptTokens indicates an expected call of EncryptTokens.
func (mr *MockTokenEncryptionServiceMockRecorder) EncryptTokens(accessToken, refreshToken, publicKey, accessExpiry, refreshExpiry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptTokens", reflect.TypeOf((*MockTokenEncryptionService)(nil).EncryptTokens), accessToken, refreshToken, publicKey, accessExpiry, refreshExpiry)
}
