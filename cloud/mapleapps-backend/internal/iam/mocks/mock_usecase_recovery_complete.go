// Code generated by MockGen. DO NOT EDIT.
// Source: internal/iam/usecase/recovery/complete.go
//
// Generated by this command:
//
//	mockgen -source=internal/iam/usecase/recovery/complete.go -destination=internal/iam/mocks/mock_usecase_recovery_complete.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	recovery "github.com/mapleapps-ca/monorepo/cloud/mapleapps-backend/internal/iam/usecase/recovery"
	gomock "go.uber.org/mock/gomock"
)

// MockCompleteRecoveryUseCase is a mock of CompleteRecoveryUseCase interface.
type MockCompleteRecoveryUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCompleteRecoveryUseCaseMockRecorder
	isgomock struct{}
}

// MockCompleteRecoveryUseCaseMockRecorder is the mock recorder for MockCompleteRecoveryUseCase.
type MockCompleteRecoveryUseCaseMockRecorder struct {
	mock *MockCompleteRecoveryUseCase
}

// NewMockCompleteRecoveryUseCase creates a new mock instance.
func NewMockCompleteRecoveryUseCase(ctrl *gomock.Controller) *MockCompleteRecoveryUseCase {
	mock := &MockCompleteRecoveryUseCase{ctrl: ctrl}
	mock.recorder = &MockCompleteRecoveryUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompleteRecoveryUseCase) EXPECT() *MockCompleteRecoveryUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCompleteRecoveryUseCase) Execute(ctx context.Context, req *recovery.CompleteRecoveryRequest) (*recovery.CompleteRecoveryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, req)
	ret0, _ := ret[0].(*recovery.CompleteRecoveryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockCompleteRecoveryUseCaseMockRecorder) Execute(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCompleteRecoveryUseCase)(nil).Execute), ctx, req)
}
