// Code generated by MockGen. DO NOT EDIT.
// Source: internal/maplefile/domain/collection/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/maplefile/domain/collection/interface.go -destination=internal/maplefile/mocks/mock_repository_collection.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gocql "github.com/gocql/gocql"
	collection "github.com/mapleapps-ca/monorepo/cloud/mapleapps-backend/internal/maplefile/domain/collection"
	gomock "go.uber.org/mock/gomock"
)

// MockCollectionRepository is a mock of CollectionRepository interface.
type MockCollectionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionRepositoryMockRecorder
	isgomock struct{}
}

// MockCollectionRepositoryMockRecorder is the mock recorder for MockCollectionRepository.
type MockCollectionRepositoryMockRecorder struct {
	mock *MockCollectionRepository
}

// NewMockCollectionRepository creates a new mock instance.
func NewMockCollectionRepository(ctrl *gomock.Controller) *MockCollectionRepository {
	mock := &MockCollectionRepository{ctrl: ctrl}
	mock.recorder = &MockCollectionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionRepository) EXPECT() *MockCollectionRepositoryMockRecorder {
	return m.recorder
}

// AddMember mocks base method.
func (m *MockCollectionRepository) AddMember(ctx context.Context, collectionID gocql.UUID, membership *collection.CollectionMembership) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMember", ctx, collectionID, membership)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMember indicates an expected call of AddMember.
func (mr *MockCollectionRepositoryMockRecorder) AddMember(ctx, collectionID, membership any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMember", reflect.TypeOf((*MockCollectionRepository)(nil).AddMember), ctx, collectionID, membership)
}

// AddMemberToHierarchy mocks base method.
func (m *MockCollectionRepository) AddMemberToHierarchy(ctx context.Context, rootID gocql.UUID, membership *collection.CollectionMembership) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMemberToHierarchy", ctx, rootID, membership)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMemberToHierarchy indicates an expected call of AddMemberToHierarchy.
func (mr *MockCollectionRepositoryMockRecorder) AddMemberToHierarchy(ctx, rootID, membership any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMemberToHierarchy", reflect.TypeOf((*MockCollectionRepository)(nil).AddMemberToHierarchy), ctx, rootID, membership)
}

// Archive mocks base method.
func (m *MockCollectionRepository) Archive(ctx context.Context, id gocql.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Archive", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Archive indicates an expected call of Archive.
func (mr *MockCollectionRepositoryMockRecorder) Archive(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Archive", reflect.TypeOf((*MockCollectionRepository)(nil).Archive), ctx, id)
}

// CheckAccess mocks base method.
func (m *MockCollectionRepository) CheckAccess(ctx context.Context, collectionID, userID gocql.UUID, requiredPermission string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAccess", ctx, collectionID, userID, requiredPermission)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAccess indicates an expected call of CheckAccess.
func (mr *MockCollectionRepositoryMockRecorder) CheckAccess(ctx, collectionID, userID, requiredPermission any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAccess", reflect.TypeOf((*MockCollectionRepository)(nil).CheckAccess), ctx, collectionID, userID, requiredPermission)
}

// CheckIfExistsByID mocks base method.
func (m *MockCollectionRepository) CheckIfExistsByID(ctx context.Context, id gocql.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfExistsByID", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfExistsByID indicates an expected call of CheckIfExistsByID.
func (mr *MockCollectionRepositoryMockRecorder) CheckIfExistsByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfExistsByID", reflect.TypeOf((*MockCollectionRepository)(nil).CheckIfExistsByID), ctx, id)
}

// Create mocks base method.
func (m *MockCollectionRepository) Create(ctx context.Context, arg1 *collection.Collection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCollectionRepositoryMockRecorder) Create(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCollectionRepository)(nil).Create), ctx, arg1)
}

// FindByParent mocks base method.
func (m *MockCollectionRepository) FindByParent(ctx context.Context, parentID gocql.UUID) ([]*collection.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByParent", ctx, parentID)
	ret0, _ := ret[0].([]*collection.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByParent indicates an expected call of FindByParent.
func (mr *MockCollectionRepositoryMockRecorder) FindByParent(ctx, parentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByParent", reflect.TypeOf((*MockCollectionRepository)(nil).FindByParent), ctx, parentID)
}

// FindDescendants mocks base method.
func (m *MockCollectionRepository) FindDescendants(ctx context.Context, collectionID gocql.UUID) ([]*collection.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDescendants", ctx, collectionID)
	ret0, _ := ret[0].([]*collection.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDescendants indicates an expected call of FindDescendants.
func (mr *MockCollectionRepositoryMockRecorder) FindDescendants(ctx, collectionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDescendants", reflect.TypeOf((*MockCollectionRepository)(nil).FindDescendants), ctx, collectionID)
}

// FindRootCollections mocks base method.
func (m *MockCollectionRepository) FindRootCollections(ctx context.Context, ownerID gocql.UUID) ([]*collection.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRootCollections", ctx, ownerID)
	ret0, _ := ret[0].([]*collection.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRootCollections indicates an expected call of FindRootCollections.
func (mr *MockCollectionRepositoryMockRecorder) FindRootCollections(ctx, ownerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRootCollections", reflect.TypeOf((*MockCollectionRepository)(nil).FindRootCollections), ctx, ownerID)
}

// Get mocks base method.
func (m *MockCollectionRepository) Get(ctx context.Context, id gocql.UUID) (*collection.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*collection.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCollectionRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCollectionRepository)(nil).Get), ctx, id)
}

// GetAllByUserID mocks base method.
func (m *MockCollectionRepository) GetAllByUserID(ctx context.Context, ownerID gocql.UUID) ([]*collection.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUserID", ctx, ownerID)
	ret0, _ := ret[0].([]*collection.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUserID indicates an expected call of GetAllByUserID.
func (mr *MockCollectionRepositoryMockRecorder) GetAllByUserID(ctx, ownerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUserID", reflect.TypeOf((*MockCollectionRepository)(nil).GetAllByUserID), ctx, ownerID)
}

// GetAllByUserIDAndAnyType mocks base method.
func (m *MockCollectionRepository) GetAllByUserIDAndAnyType(ctx context.Context, userID gocql.UUID, cursor *collection.CollectionSyncCursor, limit int64) (*collection.CollectionSyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUserIDAndAnyType", ctx, userID, cursor, limit)
	ret0, _ := ret[0].(*collection.CollectionSyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUserIDAndAnyType indicates an expected call of GetAllByUserIDAndAnyType.
func (mr *MockCollectionRepositoryMockRecorder) GetAllByUserIDAndAnyType(ctx, userID, cursor, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUserIDAndAnyType", reflect.TypeOf((*MockCollectionRepository)(nil).GetAllByUserIDAndAnyType), ctx, userID, cursor, limit)
}

// GetCollectionMembership mocks base method.
func (m *MockCollectionRepository) GetCollectionMembership(ctx context.Context, collectionID, recipientID gocql.UUID) (*collection.CollectionMembership, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionMembership", ctx, collectionID, recipientID)
	ret0, _ := ret[0].(*collection.CollectionMembership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionMembership indicates an expected call of GetCollectionMembership.
func (mr *MockCollectionRepositoryMockRecorder) GetCollectionMembership(ctx, collectionID, recipientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionMembership", reflect.TypeOf((*MockCollectionRepository)(nil).GetCollectionMembership), ctx, collectionID, recipientID)
}

// GetCollectionSyncData mocks base method.
func (m *MockCollectionRepository) GetCollectionSyncData(ctx context.Context, userID gocql.UUID, cursor *collection.CollectionSyncCursor, limit int64) (*collection.CollectionSyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionSyncData", ctx, userID, cursor, limit)
	ret0, _ := ret[0].(*collection.CollectionSyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionSyncData indicates an expected call of GetCollectionSyncData.
func (mr *MockCollectionRepositoryMockRecorder) GetCollectionSyncData(ctx, userID, cursor, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionSyncData", reflect.TypeOf((*MockCollectionRepository)(nil).GetCollectionSyncData), ctx, userID, cursor, limit)
}

// GetCollectionsSharedWithUser mocks base method.
func (m *MockCollectionRepository) GetCollectionsSharedWithUser(ctx context.Context, userID gocql.UUID) ([]*collection.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionsSharedWithUser", ctx, userID)
	ret0, _ := ret[0].([]*collection.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionsSharedWithUser indicates an expected call of GetCollectionsSharedWithUser.
func (mr *MockCollectionRepositoryMockRecorder) GetCollectionsSharedWithUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionsSharedWithUser", reflect.TypeOf((*MockCollectionRepository)(nil).GetCollectionsSharedWithUser), ctx, userID)
}

// GetCollectionsWithFilter mocks base method.
func (m *MockCollectionRepository) GetCollectionsWithFilter(ctx context.Context, options collection.CollectionFilterOptions) (*collection.CollectionFilterResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionsWithFilter", ctx, options)
	ret0, _ := ret[0].(*collection.CollectionFilterResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionsWithFilter indicates an expected call of GetCollectionsWithFilter.
func (mr *MockCollectionRepositoryMockRecorder) GetCollectionsWithFilter(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionsWithFilter", reflect.TypeOf((*MockCollectionRepository)(nil).GetCollectionsWithFilter), ctx, options)
}

// GetUserPermissionLevel mocks base method.
func (m *MockCollectionRepository) GetUserPermissionLevel(ctx context.Context, collectionID, userID gocql.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPermissionLevel", ctx, collectionID, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPermissionLevel indicates an expected call of GetUserPermissionLevel.
func (mr *MockCollectionRepositoryMockRecorder) GetUserPermissionLevel(ctx, collectionID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPermissionLevel", reflect.TypeOf((*MockCollectionRepository)(nil).GetUserPermissionLevel), ctx, collectionID, userID)
}

// HardDelete mocks base method.
func (m *MockCollectionRepository) HardDelete(ctx context.Context, id gocql.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// HardDelete indicates an expected call of HardDelete.
func (mr *MockCollectionRepositoryMockRecorder) HardDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardDelete", reflect.TypeOf((*MockCollectionRepository)(nil).HardDelete), ctx, id)
}

// IsCollectionOwner mocks base method.
func (m *MockCollectionRepository) IsCollectionOwner(ctx context.Context, collectionID, userID gocql.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCollectionOwner", ctx, collectionID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCollectionOwner indicates an expected call of IsCollectionOwner.
func (mr *MockCollectionRepositoryMockRecorder) IsCollectionOwner(ctx, collectionID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCollectionOwner", reflect.TypeOf((*MockCollectionRepository)(nil).IsCollectionOwner), ctx, collectionID, userID)
}

// MoveCollection mocks base method.
func (m *MockCollectionRepository) MoveCollection(ctx context.Context, collectionID, newParentID gocql.UUID, updatedAncestors []gocql.UUID, updatedPathSegments []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveCollection", ctx, collectionID, newParentID, updatedAncestors, updatedPathSegments)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveCollection indicates an expected call of MoveCollection.
func (mr *MockCollectionRepositoryMockRecorder) MoveCollection(ctx, collectionID, newParentID, updatedAncestors, updatedPathSegments any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveCollection", reflect.TypeOf((*MockCollectionRepository)(nil).MoveCollection), ctx, collectionID, newParentID, updatedAncestors, updatedPathSegments)
}

// RemoveMember mocks base method.
func (m *MockCollectionRepository) RemoveMember(ctx context.Context, collectionID, recipientID gocql.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMember", ctx, collectionID, recipientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMember indicates an expected call of RemoveMember.
func (mr *MockCollectionRepositoryMockRecorder) RemoveMember(ctx, collectionID, recipientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMember", reflect.TypeOf((*MockCollectionRepository)(nil).RemoveMember), ctx, collectionID, recipientID)
}

// RemoveMemberFromHierarchy mocks base method.
func (m *MockCollectionRepository) RemoveMemberFromHierarchy(ctx context.Context, rootID, recipientID gocql.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMemberFromHierarchy", ctx, rootID, recipientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMemberFromHierarchy indicates an expected call of RemoveMemberFromHierarchy.
func (mr *MockCollectionRepositoryMockRecorder) RemoveMemberFromHierarchy(ctx, rootID, recipientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMemberFromHierarchy", reflect.TypeOf((*MockCollectionRepository)(nil).RemoveMemberFromHierarchy), ctx, rootID, recipientID)
}

// Restore mocks base method.
func (m *MockCollectionRepository) Restore(ctx context.Context, id gocql.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore.
func (mr *MockCollectionRepositoryMockRecorder) Restore(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockCollectionRepository)(nil).Restore), ctx, id)
}

// SoftDelete mocks base method.
func (m *MockCollectionRepository) SoftDelete(ctx context.Context, id gocql.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDelete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDelete indicates an expected call of SoftDelete.
func (mr *MockCollectionRepositoryMockRecorder) SoftDelete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDelete", reflect.TypeOf((*MockCollectionRepository)(nil).SoftDelete), ctx, id)
}

// Update mocks base method.
func (m *MockCollectionRepository) Update(ctx context.Context, arg1 *collection.Collection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCollectionRepositoryMockRecorder) Update(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCollectionRepository)(nil).Update), ctx, arg1)
}

// UpdateMemberPermission mocks base method.
func (m *MockCollectionRepository) UpdateMemberPermission(ctx context.Context, collectionID, recipientID gocql.UUID, newPermission string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMemberPermission", ctx, collectionID, recipientID, newPermission)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMemberPermission indicates an expected call of UpdateMemberPermission.
func (mr *MockCollectionRepositoryMockRecorder) UpdateMemberPermission(ctx, collectionID, recipientID, newPermission any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMemberPermission", reflect.TypeOf((*MockCollectionRepository)(nil).UpdateMemberPermission), ctx, collectionID, recipientID, newPermission)
}
