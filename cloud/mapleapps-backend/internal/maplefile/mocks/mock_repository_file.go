// Code generated by MockGen. DO NOT EDIT.
// Source: internal/maplefile/domain/file/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/maplefile/domain/file/interface.go -destination=internal/maplefile/mocks/mock_repository_file.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gocql "github.com/gocql/gocql"
	file "github.com/mapleapps-ca/monorepo/cloud/mapleapps-backend/internal/maplefile/domain/file"
	gomock "go.uber.org/mock/gomock"
)

// MockFileMetadataRepository is a mock of FileMetadataRepository interface.
type MockFileMetadataRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileMetadataRepositoryMockRecorder
	isgomock struct{}
}

// MockFileMetadataRepositoryMockRecorder is the mock recorder for MockFileMetadataRepository.
type MockFileMetadataRepositoryMockRecorder struct {
	mock *MockFileMetadataRepository
}

// NewMockFileMetadataRepository creates a new mock instance.
func NewMockFileMetadataRepository(ctrl *gomock.Controller) *MockFileMetadataRepository {
	mock := &MockFileMetadataRepository{ctrl: ctrl}
	mock.recorder = &MockFileMetadataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileMetadataRepository) EXPECT() *MockFileMetadataRepositoryMockRecorder {
	return m.recorder
}

// Archive mocks base method.
func (m *MockFileMetadataRepository) Archive(id gocql.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Archive", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Archive indicates an expected call of Archive.
func (mr *MockFileMetadataRepositoryMockRecorder) Archive(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Archive", reflect.TypeOf((*MockFileMetadataRepository)(nil).Archive), id)
}

// CheckIfExistsByID mocks base method.
func (m *MockFileMetadataRepository) CheckIfExistsByID(id gocql.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfExistsByID", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfExistsByID indicates an expected call of CheckIfExistsByID.
func (mr *MockFileMetadataRepositoryMockRecorder) CheckIfExistsByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfExistsByID", reflect.TypeOf((*MockFileMetadataRepository)(nil).CheckIfExistsByID), id)
}

// CheckIfUserHasAccess mocks base method.
func (m *MockFileMetadataRepository) CheckIfUserHasAccess(fileID, userID gocql.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfUserHasAccess", fileID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfUserHasAccess indicates an expected call of CheckIfUserHasAccess.
func (mr *MockFileMetadataRepositoryMockRecorder) CheckIfUserHasAccess(fileID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfUserHasAccess", reflect.TypeOf((*MockFileMetadataRepository)(nil).CheckIfUserHasAccess), fileID, userID)
}

// Create mocks base method.
func (m *MockFileMetadataRepository) Create(arg0 *file.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockFileMetadataRepositoryMockRecorder) Create(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFileMetadataRepository)(nil).Create), arg0)
}

// CreateMany mocks base method.
func (m *MockFileMetadataRepository) CreateMany(files []*file.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMany", files)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMany indicates an expected call of CreateMany.
func (mr *MockFileMetadataRepositoryMockRecorder) CreateMany(files any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMany", reflect.TypeOf((*MockFileMetadataRepository)(nil).CreateMany), files)
}

// Get mocks base method.
func (m *MockFileMetadataRepository) Get(id gocql.UUID) (*file.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*file.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFileMetadataRepositoryMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFileMetadataRepository)(nil).Get), id)
}

// GetByCollection mocks base method.
func (m *MockFileMetadataRepository) GetByCollection(collectionID gocql.UUID) ([]*file.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCollection", collectionID)
	ret0, _ := ret[0].([]*file.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCollection indicates an expected call of GetByCollection.
func (mr *MockFileMetadataRepositoryMockRecorder) GetByCollection(collectionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCollection", reflect.TypeOf((*MockFileMetadataRepository)(nil).GetByCollection), collectionID)
}

// GetByCreatedByUserID mocks base method.
func (m *MockFileMetadataRepository) GetByCreatedByUserID(createdByUserID gocql.UUID) ([]*file.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCreatedByUserID", createdByUserID)
	ret0, _ := ret[0].([]*file.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCreatedByUserID indicates an expected call of GetByCreatedByUserID.
func (mr *MockFileMetadataRepositoryMockRecorder) GetByCreatedByUserID(createdByUserID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCreatedByUserID", reflect.TypeOf((*MockFileMetadataRepository)(nil).GetByCreatedByUserID), createdByUserID)
}

// GetByIDs mocks base method.
func (m *MockFileMetadataRepository) GetByIDs(ids []gocql.UUID) ([]*file.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDs", ids)
	ret0, _ := ret[0].([]*file.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDs indicates an expected call of GetByIDs.
func (mr *MockFileMetadataRepositoryMockRecorder) GetByIDs(ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDs", reflect.TypeOf((*MockFileMetadataRepository)(nil).GetByIDs), ids)
}

// GetByOwnerID mocks base method.
func (m *MockFileMetadataRepository) GetByOwnerID(ownerID gocql.UUID) ([]*file.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOwnerID", ownerID)
	ret0, _ := ret[0].([]*file.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOwnerID indicates an expected call of GetByOwnerID.
func (mr *MockFileMetadataRepositoryMockRecorder) GetByOwnerID(ownerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOwnerID", reflect.TypeOf((*MockFileMetadataRepository)(nil).GetByOwnerID), ownerID)
}

// HardDelete mocks base method.
func (m *MockFileMetadataRepository) HardDelete(id gocql.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardDelete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// HardDelete indicates an expected call of HardDelete.
func (mr *MockFileMetadataRepositoryMockRecorder) HardDelete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardDelete", reflect.TypeOf((*MockFileMetadataRepository)(nil).HardDelete), id)
}

// HardDeleteMany mocks base method.
func (m *MockFileMetadataRepository) HardDeleteMany(ids []gocql.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardDeleteMany", ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// HardDeleteMany indicates an expected call of HardDeleteMany.
func (mr *MockFileMetadataRepositoryMockRecorder) HardDeleteMany(ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardDeleteMany", reflect.TypeOf((*MockFileMetadataRepository)(nil).HardDeleteMany), ids)
}

// ListSyncData mocks base method.
func (m *MockFileMetadataRepository) ListSyncData(ctx context.Context, userID gocql.UUID, cursor *file.FileSyncCursor, limit int64, accessibleCollectionIDs []gocql.UUID) (*file.FileSyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSyncData", ctx, userID, cursor, limit, accessibleCollectionIDs)
	ret0, _ := ret[0].(*file.FileSyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSyncData indicates an expected call of ListSyncData.
func (mr *MockFileMetadataRepositoryMockRecorder) ListSyncData(ctx, userID, cursor, limit, accessibleCollectionIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSyncData", reflect.TypeOf((*MockFileMetadataRepository)(nil).ListSyncData), ctx, userID, cursor, limit, accessibleCollectionIDs)
}

// Restore mocks base method.
func (m *MockFileMetadataRepository) Restore(id gocql.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore.
func (mr *MockFileMetadataRepositoryMockRecorder) Restore(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockFileMetadataRepository)(nil).Restore), id)
}

// SoftDelete mocks base method.
func (m *MockFileMetadataRepository) SoftDelete(id gocql.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDelete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDelete indicates an expected call of SoftDelete.
func (mr *MockFileMetadataRepositoryMockRecorder) SoftDelete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDelete", reflect.TypeOf((*MockFileMetadataRepository)(nil).SoftDelete), id)
}

// SoftDeleteMany mocks base method.
func (m *MockFileMetadataRepository) SoftDeleteMany(ids []gocql.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDeleteMany", ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDeleteMany indicates an expected call of SoftDeleteMany.
func (mr *MockFileMetadataRepositoryMockRecorder) SoftDeleteMany(ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDeleteMany", reflect.TypeOf((*MockFileMetadataRepository)(nil).SoftDeleteMany), ids)
}

// Update mocks base method.
func (m *MockFileMetadataRepository) Update(arg0 *file.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockFileMetadataRepositoryMockRecorder) Update(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFileMetadataRepository)(nil).Update), arg0)
}

// MockFileObjectStorageRepository is a mock of FileObjectStorageRepository interface.
type MockFileObjectStorageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileObjectStorageRepositoryMockRecorder
	isgomock struct{}
}

// MockFileObjectStorageRepositoryMockRecorder is the mock recorder for MockFileObjectStorageRepository.
type MockFileObjectStorageRepositoryMockRecorder struct {
	mock *MockFileObjectStorageRepository
}

// NewMockFileObjectStorageRepository creates a new mock instance.
func NewMockFileObjectStorageRepository(ctrl *gomock.Controller) *MockFileObjectStorageRepository {
	mock := &MockFileObjectStorageRepository{ctrl: ctrl}
	mock.recorder = &MockFileObjectStorageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileObjectStorageRepository) EXPECT() *MockFileObjectStorageRepositoryMockRecorder {
	return m.recorder
}

// DeleteEncryptedData mocks base method.
func (m *MockFileObjectStorageRepository) DeleteEncryptedData(storagePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEncryptedData", storagePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEncryptedData indicates an expected call of DeleteEncryptedData.
func (mr *MockFileObjectStorageRepositoryMockRecorder) DeleteEncryptedData(storagePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEncryptedData", reflect.TypeOf((*MockFileObjectStorageRepository)(nil).DeleteEncryptedData), storagePath)
}

// GeneratePresignedDownloadURL mocks base method.
func (m *MockFileObjectStorageRepository) GeneratePresignedDownloadURL(storagePath string, duration time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePresignedDownloadURL", storagePath, duration)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePresignedDownloadURL indicates an expected call of GeneratePresignedDownloadURL.
func (mr *MockFileObjectStorageRepositoryMockRecorder) GeneratePresignedDownloadURL(storagePath, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePresignedDownloadURL", reflect.TypeOf((*MockFileObjectStorageRepository)(nil).GeneratePresignedDownloadURL), storagePath, duration)
}

// GeneratePresignedUploadURL mocks base method.
func (m *MockFileObjectStorageRepository) GeneratePresignedUploadURL(storagePath string, duration time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePresignedUploadURL", storagePath, duration)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePresignedUploadURL indicates an expected call of GeneratePresignedUploadURL.
func (mr *MockFileObjectStorageRepositoryMockRecorder) GeneratePresignedUploadURL(storagePath, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePresignedUploadURL", reflect.TypeOf((*MockFileObjectStorageRepository)(nil).GeneratePresignedUploadURL), storagePath, duration)
}

// GetEncryptedData mocks base method.
func (m *MockFileObjectStorageRepository) GetEncryptedData(storagePath string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncryptedData", storagePath)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEncryptedData indicates an expected call of GetEncryptedData.
func (mr *MockFileObjectStorageRepositoryMockRecorder) GetEncryptedData(storagePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncryptedData", reflect.TypeOf((*MockFileObjectStorageRepository)(nil).GetEncryptedData), storagePath)
}

// GetObjectSize mocks base method.
func (m *MockFileObjectStorageRepository) GetObjectSize(storagePath string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectSize", storagePath)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectSize indicates an expected call of GetObjectSize.
func (mr *MockFileObjectStorageRepositoryMockRecorder) GetObjectSize(storagePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectSize", reflect.TypeOf((*MockFileObjectStorageRepository)(nil).GetObjectSize), storagePath)
}

// StoreEncryptedData mocks base method.
func (m *MockFileObjectStorageRepository) StoreEncryptedData(ownerID, fileID string, encryptedData []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreEncryptedData", ownerID, fileID, encryptedData)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreEncryptedData indicates an expected call of StoreEncryptedData.
func (mr *MockFileObjectStorageRepositoryMockRecorder) StoreEncryptedData(ownerID, fileID, encryptedData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreEncryptedData", reflect.TypeOf((*MockFileObjectStorageRepository)(nil).StoreEncryptedData), ownerID, fileID, encryptedData)
}

// VerifyObjectExists mocks base method.
func (m *MockFileObjectStorageRepository) VerifyObjectExists(storagePath string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyObjectExists", storagePath)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyObjectExists indicates an expected call of VerifyObjectExists.
func (mr *MockFileObjectStorageRepositoryMockRecorder) VerifyObjectExists(storagePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyObjectExists", reflect.TypeOf((*MockFileObjectStorageRepository)(nil).VerifyObjectExists), storagePath)
}
