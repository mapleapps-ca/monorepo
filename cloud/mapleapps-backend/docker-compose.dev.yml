# Docker Compose configuration optimized for Cassandra 5.x
# This addresses the specific startup and health check requirements of version 5.x

version: "3.8"
services:
  cassandra1:
    image: cassandra:5.0
    container_name: mapleapps_cassandra_node1
    restart: unless-stopped
    volumes:
      - cassandra_node1_data:/var/lib/cassandra
      # Mount logs for better debugging visibility
      - cassandra_node1_logs:/opt/cassandra/logs
    ports:
      - "9042:9042"
      - "7199:7199" # JMX port for monitoring
    environment:
      - CASSANDRA_SEEDS=cassandra1,cassandra2,cassandra3
      - CASSANDRA_CLUSTER_NAME=mapleapps_cluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack1
      # Memory settings optimized for Cassandra 5.x
      - HEAP_NEWSIZE=400m
      - MAX_HEAP_SIZE=2g
      # Cassandra 5.x specific settings
      - CASSANDRA_NUM_TOKENS=16 # Reduced for better performance
      - CASSANDRA_MEMTABLE_ALLOCATION_TYPE=heap_buffers
    networks:
      - cassandra_network
    # Enhanced health check specifically designed for Cassandra 5.x
    healthcheck:
      # Use nodetool status instead of cqlsh for more reliable health checking
      # nodetool is more tolerant of initialization states
      test: |
        bash -c '
        # First check if the process is running
        if ! pgrep -f "org.apache.cassandra.service.CassandraDaemon" > /dev/null; then
          echo "Cassandra process not running"
          exit 1
        fi

        # Then check if nodetool can connect (more reliable than cqlsh)
        if ! nodetool status 2>/dev/null | grep -q "UN.*$(hostname -i)"; then
          echo "Cassandra not yet in UP/NORMAL state"
          exit 1
        fi

        echo "Cassandra is healthy"
        exit 0
        '
      interval: 30s # Check every 30 seconds
      timeout: 20s # Allow 20 seconds for the check to complete
      retries: 15 # Try 15 times before marking as unhealthy (7.5 minutes total)
      start_period: 5m # Wait 5 minutes before starting health checks

  cassandra2:
    image: cassandra:5.0
    container_name: mapleapps_cassandra_node2
    restart: unless-stopped
    volumes:
      - cassandra_node2_data:/var/lib/cassandra
      - cassandra_node2_logs:/opt/cassandra/logs
    ports:
      - "9043:9042"
      - "7200:7199"
    environment:
      - CASSANDRA_SEEDS=cassandra1,cassandra2,cassandra3
      - CASSANDRA_CLUSTER_NAME=mapleapps_cluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack1
      - HEAP_NEWSIZE=400m
      - MAX_HEAP_SIZE=2g
      - CASSANDRA_NUM_TOKENS=16
      - CASSANDRA_MEMTABLE_ALLOCATION_TYPE=heap_buffers
    depends_on:
      cassandra1:
        condition: service_healthy
    networks:
      - cassandra_network
    healthcheck:
      test: |
        bash -c '
        if ! pgrep -f "org.apache.cassandra.service.CassandraDaemon" > /dev/null; then
          echo "Cassandra process not running"
          exit 1
        fi

        if ! nodetool status 2>/dev/null | grep -q "UN.*$(hostname -i)"; then
          echo "Cassandra not yet in UP/NORMAL state"
          exit 1
        fi

        echo "Cassandra is healthy"
        exit 0
        '
      interval: 30s
      timeout: 20s
      retries: 15
      start_period: 5m

  cassandra3:
    image: cassandra:5.0
    container_name: mapleapps_cassandra_node3
    restart: unless-stopped
    volumes:
      - cassandra_node3_data:/var/lib/cassandra
      - cassandra_node3_logs:/opt/cassandra/logs
    ports:
      - "9044:9042"
      - "7201:7199"
    environment:
      - CASSANDRA_SEEDS=cassandra1,cassandra2,cassandra3
      - CASSANDRA_CLUSTER_NAME=mapleapps_cluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack1
      - HEAP_NEWSIZE=400m
      - MAX_HEAP_SIZE=2g
      - CASSANDRA_NUM_TOKENS=16
      - CASSANDRA_MEMTABLE_ALLOCATION_TYPE=heap_buffers
    depends_on:
      cassandra1:
        condition: service_healthy
      cassandra2:
        condition: service_healthy
    networks:
      - cassandra_network
    healthcheck:
      test: |
        bash -c '
        if ! pgrep -f "org.apache.cassandra.service.CassandraDaemon" > /dev/null; then
          echo "Cassandra process not running"
          exit 1
        fi

        if ! nodetool status 2>/dev/null | grep -q "UN.*$(hostname -i)"; then
          echo "Cassandra not yet in UP/NORMAL state"
          exit 1
        fi

        echo "Cassandra is healthy"
        exit 0
        '
      interval: 30s
      timeout: 20s
      retries: 15
      start_period: 5m

  cache:
    container_name: mapleapps_cache
    image: redis:alpine
    command: "redis-server --save 60 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81 --protected-mode yes"
    ports:
      - 6379:6379
    restart: unless-stopped
    volumes:
      - "./data/redis:/data"
    networks:
      - cassandra_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  # Enhanced cluster readiness verification
  wait-for-cluster:
    image: cassandra:5.0
    depends_on:
      cassandra1:
        condition: service_healthy
      cassandra2:
        condition: service_healthy
      cassandra3:
        condition: service_healthy
      cache:
        condition: service_healthy
    command:
      - "bash"
      - "-c"
      - |
        echo "All Cassandra 5.x nodes are healthy!"
        echo "Performing final cluster validation..."

        # Wait a bit more for cluster stabilization
        sleep 30

        # Validate cluster status from each node
        echo "Checking cluster status from node 1..."
        if ! nodetool -h cassandra1 status; then
          echo "Warning: Could not get status from node 1"
        fi

        echo "Checking cluster status from node 2..."
        if ! nodetool -h cassandra2 status; then
          echo "Warning: Could not get status from node 2"
        fi

        echo "Checking cluster status from node 3..."
        if ! nodetool -h cassandra3 status; then
          echo "Warning: Could not get status from node 3"
        fi

        # Test basic CQL connectivity
        echo "Testing CQL connectivity..."
        if cqlsh cassandra1 -e "SELECT cluster_name, release_version FROM system.local;"; then
          echo "âœ“ CQL connectivity successful"
        else
          echo "âœ— CQL connectivity failed"
          exit 1
        fi

        echo "ðŸŽ‰ Cassandra 5.x cluster is fully operational!"
        echo "   Cluster nodes: cassandra1:9042, cassandra2:9042, cassandra3:9042"
        echo "   Redis cache: cache:6379"
        echo "   Ready for application connections!"
    networks:
      - cassandra_network

  app:
    container_name: mapleapps_backend
    stdin_open: true
    environment:
      # Application Configuration
      BACKEND_APP_DATA_DIRECTORY: ${BACKEND_APP_DATA_DIRECTORY}
      BACKEND_IP: 0.0.0.0
      BACKEND_PORT: 8000
      BACKEND_APP_ADMINISTRATION_HMAC_SECRET: ${BACKEND_APP_ADMINISTRATION_HMAC_SECRET}
      BACKEND_APP_ADMINISTRATION_SECRET_KEY: ${BACKEND_APP_ADMINISTRATION_SECRET_KEY}
      BACKEND_APP_GEOLITE_DB_PATH: ${BACKEND_APP_GEOLITE_DB_PATH}
      BACKEND_APP_BANNED_COUNTRIES: ${BACKEND_APP_BANNED_COUNTRIES}
      BACKEND_APP_BETA_ACCESS_CODE: ${BACKEND_APP_BETA_ACCESS_CODE}
      ENVIRONMENT: development
      SERVICE_VERSION: 1.0.0-dev

      # Database Configuration - optimized for Cassandra 5.x
      BACKEND_DB_HOSTS: "cassandra1,cassandra2,cassandra3"
      BACKEND_DB_KEYSPACE: "mapleapps"
      BACKEND_DB_CONSISTENCY: "LOCAL_QUORUM"
      BACKEND_DB_USERNAME: ""
      BACKEND_DB_PASSWORD: ""
      BACKEND_MIGRATIONS_PATH: "file://migrations"
      # Increased timeouts for Cassandra 5.x initialization
      BACKEND_DB_CONNECT_TIMEOUT: 180s # 3 minutes for initial connection
      BACKEND_DB_REQUEST_TIMEOUT: 60s # 1 minute for individual requests
      BACKEND_DB_REPLICATION_FACTOR: 3
      BACKEND_DB_MAX_RETRY_ATTEMPTS: 30 # More retries for stability
      BACKEND_DB_RETRY_DELAY: 15s # Longer delay between retries

      # Cache Configuration
      BACKEND_CACHE_URI: ${BACKEND_CACHE_URI}

      # AWS Configuration
      BACKEND_AWS_ACCESS_KEY: ${BACKEND_AWS_ACCESS_KEY}
      BACKEND_AWS_SECRET_KEY: ${BACKEND_AWS_SECRET_KEY}
      BACKEND_AWS_ENDPOINT: ${BACKEND_AWS_ENDPOINT}
      BACKEND_AWS_REGION: ${BACKEND_AWS_REGION}
      BACKEND_AWS_BUCKET_NAME: ${BACKEND_AWS_BUCKET_NAME}

      # Logging Configuration
      LOG_LEVEL: debug
      LOG_FORMAT: console
      LOG_ENABLE_STACKTRACE: "true"
      LOG_ENABLE_CALLER: "true"

      # Observability Configuration
      BACKEND_OBSERVABILITY_ENABLED: "true"
      BACKEND_OBSERVABILITY_PORT: "8080"
      BACKEND_HEALTH_CHECK_TIMEOUT: "30s"
      BACKEND_METRICS_ENABLED: "true"
      BACKEND_HEALTH_CHECKS_ENABLED: "true"
      BACKEND_DETAILED_HEALTH_CHECKS: "true"

      # Mailgun configurations (unchanged)
      BACKEND_MAPLEFILE_MAILGUN_API_KEY: ${BACKEND_MAPLEFILE_MAILGUN_API_KEY}
      BACKEND_MAPLEFILE_MAILGUN_DOMAIN: ${BACKEND_MAPLEFILE_MAILGUN_DOMAIN}
      BACKEND_MAPLEFILE_MAILGUN_API_BASE: ${BACKEND_MAPLEFILE_MAILGUN_API_BASE}
      BACKEND_MAPLEFILE_MAILGUN_SENDER_EMAIL: ${BACKEND_MAPLEFILE_MAILGUN_SENDER_EMAIL}
      BACKEND_MAPLEFILE_MAILGUN_MAINTENANCE_EMAIL: ${BACKEND_MAPLEFILE_MAILGUN_MAINTENANCE_EMAIL}
      BACKEND_MAPLEFILE_MAILGUN_FRONTEND_DOMAIN: ${BACKEND_MAPLEFILE_MAILGUN_FRONTEND_DOMAIN}
      BACKEND_MAPLEFILE_MAILGUN_BACKEND_DOMAIN: ${BACKEND_MAPLEFILE_MAILGUN_BACKEND_DOMAIN}

      BACKEND_PAPERCLOUD_MAILGUN_API_KEY: ${BACKEND_PAPERCLOUD_MAILGUN_API_KEY}
      BACKEND_PAPERCLOUD_MAILGUN_DOMAIN: ${BACKEND_PAPERCLOUD_MAILGUN_DOMAIN}
      BACKEND_PAPERCLOUD_MAILGUN_API_BASE: ${BACKEND_PAPERCLOUD_MAILGUN_API_BASE}
      BACKEND_PAPERCLOUD_MAILGUN_SENDER_EMAIL: ${BACKEND_PAPERCLOUD_MAILGUN_SENDER_EMAIL}
      BACKEND_PAPERCLOUD_MAILGUN_MAINTENANCE_EMAIL: ${BACKEND_PAPERCLOUD_MAILGUN_MAINTENANCE_EMAIL}
      BACKEND_PAPERCLOUD_MAILGUN_FRONTEND_DOMAIN: ${BACKEND_PAPERCLOUD_MAILGUN_FRONTEND_DOMAIN}
      BACKEND_PAPERCLOUD_MAILGUN_BACKEND_DOMAIN: ${BACKEND_PAPERCLOUD_MAILGUN_BACKEND_DOMAIN}

    build:
      context: .
      dockerfile: ./dev.Dockerfile
    restart: unless-stopped
    ports:
      - "8000:8000" # Main application port
      - "8080:8080" # Observability port
    depends_on:
      wait-for-cluster:
        condition: service_completed_successfully
    volumes:
      - ./:/go/src/github.com/mapleapps-ca/monorepo/cloud/mapleapps-backend
    networks:
      - cassandra_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/live"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 3m # Longer startup time for Cassandra 5.x compatibility

volumes:
  cassandra_node1_data:
  cassandra_node2_data:
  cassandra_node3_data:
  cassandra_node1_logs: # Added for better debugging
  cassandra_node2_logs:
  cassandra_node3_logs:

networks:
  cassandra_network:
    driver: bridge
