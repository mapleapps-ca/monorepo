#############
# HOW TO USE:
#############
# 3-node Cassandra 5.0 cluster for development
# This version uses CQL-based health checks instead of JMX-dependent nodetool commands
# Trade-off: Full remote management features are limited, but core database functionality is complete

version: "3.8"
services:
  cassandra1:
    image: cassandra:5.0.4
    container_name: mapleapps_cassandra_node1
    restart: unless-stopped
    volumes:
      - cassandra_node1_data:/var/lib/cassandra
    ports:
      - "9042:9042" # CQL port - this is what your application uses
    environment:
      # Core cluster configuration
      - CASSANDRA_SEEDS=cassandra1,cassandra2,cassandra3
      - CASSANDRA_CLUSTER_NAME=mapleapps_cluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack1

      # JVM and performance tuning for Cassandra 5.0
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - JVM_OPTS=-Xms1G -Xmx1G

      # Security settings
      - CASSANDRA_AUTHENTICATOR=AllowAllAuthenticator
      - CASSANDRA_AUTHORIZER=AllowAllAuthorizer
      - CASSANDRA_AUTO_BOOTSTRAP=false
    networks:
      - cassandra_network
    # Updated health check that uses CQL instead of JMX
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "cqlsh -e 'SELECT cluster_name FROM system.local;' || exit 1",
        ]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 3m

  cassandra2:
    image: cassandra:5.0.4
    container_name: mapleapps_cassandra_node2
    restart: unless-stopped
    volumes:
      - cassandra_node2_data:/var/lib/cassandra
    ports:
      - "9043:9042"
    environment:
      - CASSANDRA_SEEDS=cassandra1,cassandra2,cassandra3
      - CASSANDRA_CLUSTER_NAME=mapleapps_cluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - JVM_OPTS=-Xms1G -Xmx1G
      - CASSANDRA_AUTHENTICATOR=AllowAllAuthenticator
      - CASSANDRA_AUTHORIZER=AllowAllAuthorizer
    depends_on:
      cassandra1:
        condition: service_healthy
    networks:
      - cassandra_network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "cqlsh -e 'SELECT cluster_name FROM system.local;' || exit 1",
        ]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 3m

  cassandra3:
    image: cassandra:5.0.4
    container_name: mapleapps_cassandra_node3
    restart: unless-stopped
    volumes:
      - cassandra_node3_data:/var/lib/cassandra
    ports:
      - "9044:9042"
    environment:
      - CASSANDRA_SEEDS=cassandra1,cassandra2,cassandra3
      - CASSANDRA_CLUSTER_NAME=mapleapps_cluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - JVM_OPTS=-Xms1G -Xmx1G
      - CASSANDRA_AUTHENTICATOR=AllowAllAuthenticator
      - CASSANDRA_AUTHORIZER=AllowAllAuthorizer
    depends_on:
      cassandra1:
        condition: service_healthy
      cassandra2:
        condition: service_healthy
    networks:
      - cassandra_network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "cqlsh -e 'SELECT cluster_name FROM system.local;' || exit 1",
        ]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 3m

  cache:
    container_name: mapleapps_cache
    image: redis:alpine
    command: "redis-server --save 60 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81 --protected-mode yes"
    ports:
      - 6379:6379
    restart: unless-stopped
    volumes:
      - "./data/redis:/data"
    networks:
      - cassandra_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  # Updated wait service that focuses on CQL connectivity rather than JMX
  wait-for-cluster:
    image: cassandra:5.0.4
    depends_on:
      cassandra1:
        condition: service_healthy
      cassandra2:
        condition: service_healthy
      cassandra3:
        condition: service_healthy
      cache:
        condition: service_healthy
    command:
      - "bash"
      - "-c"
      - |
        echo "All services are healthy!"
        echo "Verifying Cassandra cluster database connectivity..."

        # Wait for cluster to fully stabilize
        sleep 30

        # Test database connectivity on all nodes
        echo "Testing node 1..."
        cqlsh cassandra1 -e "SELECT cluster_name, listen_address FROM system.local;"

        echo "Testing node 2..."
        cqlsh cassandra2 -e "SELECT cluster_name, listen_address FROM system.local;"

        echo "Testing node 3..."
        cqlsh cassandra3 -e "SELECT cluster_name, listen_address FROM system.local;"

        # Verify cluster membership from node 1's perspective
        echo "Checking cluster topology..."
        cqlsh cassandra1 -e "SELECT peer, rpc_address FROM system.peers;"

        echo "Cassandra 5.0 cluster is ready for application connections."
        echo "Note: JMX remote management is disabled for security. Use 'docker exec' for administrative tasks."
    networks:
      - cassandra_network

  app:
    container_name: mapleapps_backend
    stdin_open: true
    environment:
      # Application Configuration
      BACKEND_APP_DATA_DIRECTORY: ${BACKEND_APP_DATA_DIRECTORY}
      BACKEND_IP: 0.0.0.0
      BACKEND_PORT: 8000
      BACKEND_APP_ADMINISTRATION_HMAC_SECRET: ${BACKEND_APP_ADMINISTRATION_HMAC_SECRET}
      BACKEND_APP_ADMINISTRATION_SECRET_KEY: ${BACKEND_APP_ADMINISTRATION_SECRET_KEY}
      BACKEND_APP_GEOLITE_DB_PATH: ${BACKEND_APP_GEOLITE_DB_PATH}
      BACKEND_APP_BANNED_COUNTRIES: ${BACKEND_APP_BANNED_COUNTRIES}
      BACKEND_APP_BETA_ACCESS_CODE: ${BACKEND_APP_BETA_ACCESS_CODE}
      ENVIRONMENT: development
      SERVICE_VERSION: 1.0.0-dev

      # Database Configuration - Optimized for Cassandra 5.0
      BACKEND_DB_HOSTS: "cassandra1,cassandra2,cassandra3"
      BACKEND_DB_KEYSPACE: "mapleapps"
      BACKEND_DB_CONSISTENCY: "quorum"
      BACKEND_DB_USERNAME: ""
      BACKEND_DB_PASSWORD: ""
      BACKEND_MIGRATIONS_PATH: "file://migrations"
      BACKEND_DB_CONNECT_TIMEOUT: 90s
      BACKEND_DB_REQUEST_TIMEOUT: 45s
      BACKEND_DB_REPLICATION_FACTOR: 3
      BACKEND_DB_MAX_RETRY_ATTEMPTS: 60
      BACKEND_DB_RETRY_DELAY: 20s

      # Cache Configuration
      BACKEND_CACHE_URI: ${BACKEND_CACHE_URI}

      # AWS Configuration
      BACKEND_AWS_ACCESS_KEY: ${BACKEND_AWS_ACCESS_KEY}
      BACKEND_AWS_SECRET_KEY: ${BACKEND_AWS_SECRET_KEY}
      BACKEND_AWS_ENDPOINT: ${BACKEND_AWS_ENDPOINT}
      BACKEND_AWS_REGION: ${BACKEND_AWS_REGION}
      BACKEND_AWS_BUCKET_NAME: ${BACKEND_AWS_BUCKET_NAME}

      # Logging Configuration
      LOG_LEVEL: debug
      LOG_FORMAT: console
      LOG_ENABLE_STACKTRACE: "true"
      LOG_ENABLE_CALLER: "true"

      # Observability Configuration
      BACKEND_OBSERVABILITY_ENABLED: "true"
      BACKEND_OBSERVABILITY_PORT: "8080"
      BACKEND_HEALTH_CHECK_TIMEOUT: "45s"
      BACKEND_METRICS_ENABLED: "true"
      BACKEND_HEALTH_CHECKS_ENABLED: "true"
      BACKEND_DETAILED_HEALTH_CHECKS: "true"

      # MapleFile Mailgun Configuration
      BACKEND_MAPLEFILE_MAILGUN_API_KEY: ${BACKEND_MAPLEFILE_MAILGUN_API_KEY}
      BACKEND_MAPLEFILE_MAILGUN_DOMAIN: ${BACKEND_MAPLEFILE_MAILGUN_DOMAIN}
      BACKEND_MAPLEFILE_MAILGUN_API_BASE: ${BACKEND_MAPLEFILE_MAILGUN_API_BASE}
      BACKEND_MAPLEFILE_MAILGUN_SENDER_EMAIL: ${BACKEND_MAPLEFILE_MAILGUN_SENDER_EMAIL}
      BACKEND_MAPLEFILE_MAILGUN_MAINTENANCE_EMAIL: ${BACKEND_MAPLEFILE_MAILGUN_MAINTENANCE_EMAIL}
      BACKEND_MAPLEFILE_MAILGUN_FRONTEND_DOMAIN: ${BACKEND_MAPLEFILE_MAILGUN_FRONTEND_DOMAIN}
      BACKEND_MAPLEFILE_MAILGUN_BACKEND_DOMAIN: ${BACKEND_MAPLEFILE_MAILGUN_BACKEND_DOMAIN}

      # PaperCloud Mailgun Configuration
      BACKEND_PAPERCLOUD_MAILGUN_API_KEY: ${BACKEND_PAPERCLOUD_MAILGUN_API_KEY}
      BACKEND_PAPERCLOUD_MAILGUN_DOMAIN: ${BACKEND_PAPERCLOUD_MAILGUN_DOMAIN}
      BACKEND_PAPERCLOUD_MAILGUN_API_BASE: ${BACKEND_PAPERCLOUD_MAILGUN_API_BASE}
      BACKEND_PAPERCLOUD_MAILGUN_SENDER_EMAIL: ${BACKEND_PAPERCLOUD_MAILGUN_SENDER_EMAIL}
      BACKEND_PAPERCLOUD_MAILGUN_MAINTENANCE_EMAIL: ${BACKEND_PAPERCLOUD_MAILGUN_MAINTENANCE_EMAIL}
      BACKEND_PAPERCLOUD_MAILGUN_FRONTEND_DOMAIN: ${BACKEND_PAPERCLOUD_MAILGUN_FRONTEND_DOMAIN}
      BACKEND_PAPERCLOUD_MAILGUN_BACKEND_DOMAIN: ${BACKEND_PAPERCLOUD_MAILGUN_BACKEND_DOMAIN}

    build:
      context: .
      dockerfile: ./dev.Dockerfile
    restart: unless-stopped
    ports:
      - "8000:8000" # Main application port
      - "8080:8080" # Observability port (health checks, metrics)
    depends_on:
      wait-for-cluster:
        condition: service_completed_successfully
    volumes:
      - ./:/go/src/github.com/mapleapps-ca/monorepo/cloud/mapleapps-backend
    networks:
      - cassandra_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/live"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 2m

volumes:
  cassandra_node1_data:
  cassandra_node2_data:
  cassandra_node3_data:

networks:
  cassandra_network:
    driver: bridge
