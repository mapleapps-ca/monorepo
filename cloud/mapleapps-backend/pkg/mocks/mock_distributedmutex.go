// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/distributedmutex/distributelocker.go
//
// Generated by this command:
//
//	mockgen -source=pkg/distributedmutex/distributelocker.go -destination=pkg/mocks/mock_distributedmutex.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAdapter is a mock of Adapter interface.
type MockAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockAdapterMockRecorder
	isgomock struct{}
}

// MockAdapterMockRecorder is the mock recorder for MockAdapter.
type MockAdapterMockRecorder struct {
	mock *MockAdapter
}

// NewMockAdapter creates a new mock instance.
func NewMockAdapter(ctrl *gomock.Controller) *MockAdapter {
	mock := &MockAdapter{ctrl: ctrl}
	mock.recorder = &MockAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdapter) EXPECT() *MockAdapterMockRecorder {
	return m.recorder
}

// Acquire mocks base method.
func (m *MockAdapter) Acquire(ctx context.Context, key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Acquire", ctx, key)
}

// Acquire indicates an expected call of Acquire.
func (mr *MockAdapterMockRecorder) Acquire(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockAdapter)(nil).Acquire), ctx, key)
}

// Acquiref mocks base method.
func (m *MockAdapter) Acquiref(ctx context.Context, format string, a ...any) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	m.ctrl.Call(m, "Acquiref", varargs...)
}

// Acquiref indicates an expected call of Acquiref.
func (mr *MockAdapterMockRecorder) Acquiref(ctx, format any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquiref", reflect.TypeOf((*MockAdapter)(nil).Acquiref), varargs...)
}

// Release mocks base method.
func (m *MockAdapter) Release(ctx context.Context, key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release", ctx, key)
}

// Release indicates an expected call of Release.
func (mr *MockAdapterMockRecorder) Release(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockAdapter)(nil).Release), ctx, key)
}

// Releasef mocks base method.
func (m *MockAdapter) Releasef(ctx context.Context, format string, a ...any) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	m.ctrl.Call(m, "Releasef", varargs...)
}

// Releasef indicates an expected call of Releasef.
func (mr *MockAdapterMockRecorder) Releasef(ctx, format any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Releasef", reflect.TypeOf((*MockAdapter)(nil).Releasef), varargs...)
}
