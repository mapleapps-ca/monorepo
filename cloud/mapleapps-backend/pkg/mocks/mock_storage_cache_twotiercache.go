// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/storage/cache/twotiercache/twotiercache.go
//
// Generated by this command:
//
//	mockgen -source=pkg/storage/cache/twotiercache/twotiercache.go -destination=pkg/mocks/mock_storage_cache_twotiercache.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockTwoTierCacher is a mock of TwoTierCacher interface.
type MockTwoTierCacher struct {
	ctrl     *gomock.Controller
	recorder *MockTwoTierCacherMockRecorder
	isgomock struct{}
}

// MockTwoTierCacherMockRecorder is the mock recorder for MockTwoTierCacher.
type MockTwoTierCacherMockRecorder struct {
	mock *MockTwoTierCacher
}

// NewMockTwoTierCacher creates a new mock instance.
func NewMockTwoTierCacher(ctrl *gomock.Controller) *MockTwoTierCacher {
	mock := &MockTwoTierCacher{ctrl: ctrl}
	mock.recorder = &MockTwoTierCacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTwoTierCacher) EXPECT() *MockTwoTierCacherMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTwoTierCacher) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTwoTierCacherMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTwoTierCacher)(nil).Delete), ctx, key)
}

// Get mocks base method.
func (m *MockTwoTierCacher) Get(ctx context.Context, key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTwoTierCacherMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTwoTierCacher)(nil).Get), ctx, key)
}

// PurgeExpired mocks base method.
func (m *MockTwoTierCacher) PurgeExpired(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurgeExpired", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurgeExpired indicates an expected call of PurgeExpired.
func (mr *MockTwoTierCacherMockRecorder) PurgeExpired(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeExpired", reflect.TypeOf((*MockTwoTierCacher)(nil).PurgeExpired), ctx)
}

// Set mocks base method.
func (m *MockTwoTierCacher) Set(ctx context.Context, key string, val []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockTwoTierCacherMockRecorder) Set(ctx, key, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockTwoTierCacher)(nil).Set), ctx, key, val)
}

// SetWithExpiry mocks base method.
func (m *MockTwoTierCacher) SetWithExpiry(ctx context.Context, key string, val []byte, expiry time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWithExpiry", ctx, key, val, expiry)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWithExpiry indicates an expected call of SetWithExpiry.
func (mr *MockTwoTierCacherMockRecorder) SetWithExpiry(ctx, key, val, expiry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWithExpiry", reflect.TypeOf((*MockTwoTierCacher)(nil).SetWithExpiry), ctx, key, val, expiry)
}

// Shutdown mocks base method.
func (m *MockTwoTierCacher) Shutdown(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown", ctx)
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockTwoTierCacherMockRecorder) Shutdown(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockTwoTierCacher)(nil).Shutdown), ctx)
}
