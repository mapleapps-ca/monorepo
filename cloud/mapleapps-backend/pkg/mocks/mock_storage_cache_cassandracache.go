// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/storage/cache/cassandracache/cassandracache.go
//
// Generated by this command:
//
//	mockgen -source=pkg/storage/cache/cassandracache/cassandracache.go -destination=pkg/mocks/mock_storage_cache_cassandracache.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockCassandraCacher is a mock of CassandraCacher interface.
type MockCassandraCacher struct {
	ctrl     *gomock.Controller
	recorder *MockCassandraCacherMockRecorder
	isgomock struct{}
}

// MockCassandraCacherMockRecorder is the mock recorder for MockCassandraCacher.
type MockCassandraCacherMockRecorder struct {
	mock *MockCassandraCacher
}

// NewMockCassandraCacher creates a new mock instance.
func NewMockCassandraCacher(ctrl *gomock.Controller) *MockCassandraCacher {
	mock := &MockCassandraCacher{ctrl: ctrl}
	mock.recorder = &MockCassandraCacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCassandraCacher) EXPECT() *MockCassandraCacherMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCassandraCacher) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCassandraCacherMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCassandraCacher)(nil).Delete), ctx, key)
}

// Get mocks base method.
func (m *MockCassandraCacher) Get(ctx context.Context, key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCassandraCacherMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCassandraCacher)(nil).Get), ctx, key)
}

// PurgeExpired mocks base method.
func (m *MockCassandraCacher) PurgeExpired(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurgeExpired", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurgeExpired indicates an expected call of PurgeExpired.
func (mr *MockCassandraCacherMockRecorder) PurgeExpired(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeExpired", reflect.TypeOf((*MockCassandraCacher)(nil).PurgeExpired), ctx)
}

// Set mocks base method.
func (m *MockCassandraCacher) Set(ctx context.Context, key string, val []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCassandraCacherMockRecorder) Set(ctx, key, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCassandraCacher)(nil).Set), ctx, key, val)
}

// SetWithExpiry mocks base method.
func (m *MockCassandraCacher) SetWithExpiry(ctx context.Context, key string, val []byte, expiry time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWithExpiry", ctx, key, val, expiry)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWithExpiry indicates an expected call of SetWithExpiry.
func (mr *MockCassandraCacherMockRecorder) SetWithExpiry(ctx, key, val, expiry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWithExpiry", reflect.TypeOf((*MockCassandraCacher)(nil).SetWithExpiry), ctx, key, val, expiry)
}

// Shutdown mocks base method.
func (m *MockCassandraCacher) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockCassandraCacherMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockCassandraCacher)(nil).Shutdown))
}
