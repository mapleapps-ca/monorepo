// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/security/password/password.go
//
// Generated by this command:
//
//	mockgen -source=pkg/security/password/password.go -destination=pkg/mocks/mock_security_password.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	securestring "github.com/mapleapps-ca/monorepo/cloud/mapleapps-backend/pkg/security/securestring"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
	isgomock struct{}
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// AlgorithmName mocks base method.
func (m *MockProvider) AlgorithmName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlgorithmName")
	ret0, _ := ret[0].(string)
	return ret0
}

// AlgorithmName indicates an expected call of AlgorithmName.
func (mr *MockProviderMockRecorder) AlgorithmName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlgorithmName", reflect.TypeOf((*MockProvider)(nil).AlgorithmName))
}

// ComparePasswordAndHash mocks base method.
func (m *MockProvider) ComparePasswordAndHash(password *securestring.SecureString, hash string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePasswordAndHash", password, hash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComparePasswordAndHash indicates an expected call of ComparePasswordAndHash.
func (mr *MockProviderMockRecorder) ComparePasswordAndHash(password, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePasswordAndHash", reflect.TypeOf((*MockProvider)(nil).ComparePasswordAndHash), password, hash)
}

// GenerateHashFromPassword mocks base method.
func (m *MockProvider) GenerateHashFromPassword(password *securestring.SecureString) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateHashFromPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateHashFromPassword indicates an expected call of GenerateHashFromPassword.
func (mr *MockProviderMockRecorder) GenerateHashFromPassword(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateHashFromPassword", reflect.TypeOf((*MockProvider)(nil).GenerateHashFromPassword), password)
}

// GenerateSecureRandomBytes mocks base method.
func (m *MockProvider) GenerateSecureRandomBytes(length int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSecureRandomBytes", length)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateSecureRandomBytes indicates an expected call of GenerateSecureRandomBytes.
func (mr *MockProviderMockRecorder) GenerateSecureRandomBytes(length any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSecureRandomBytes", reflect.TypeOf((*MockProvider)(nil).GenerateSecureRandomBytes), length)
}

// GenerateSecureRandomString mocks base method.
func (m *MockProvider) GenerateSecureRandomString(length int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSecureRandomString", length)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateSecureRandomString indicates an expected call of GenerateSecureRandomString.
func (mr *MockProviderMockRecorder) GenerateSecureRandomString(length any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSecureRandomString", reflect.TypeOf((*MockProvider)(nil).GenerateSecureRandomString), length)
}
