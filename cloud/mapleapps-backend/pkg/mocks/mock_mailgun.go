// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/emailer/mailgun/interface.go
//
// Generated by this command:
//
//	mockgen -source=pkg/emailer/mailgun/interface.go -destination=pkg/mocks/mock_mailgun.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEmailer is a mock of Emailer interface.
type MockEmailer struct {
	ctrl     *gomock.Controller
	recorder *MockEmailerMockRecorder
	isgomock struct{}
}

// MockEmailerMockRecorder is the mock recorder for MockEmailer.
type MockEmailerMockRecorder struct {
	mock *MockEmailer
}

// NewMockEmailer creates a new mock instance.
func NewMockEmailer(ctrl *gomock.Controller) *MockEmailer {
	mock := &MockEmailer{ctrl: ctrl}
	mock.recorder = &MockEmailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailer) EXPECT() *MockEmailerMockRecorder {
	return m.recorder
}

// GetBackendDomainName mocks base method.
func (m *MockEmailer) GetBackendDomainName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackendDomainName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBackendDomainName indicates an expected call of GetBackendDomainName.
func (mr *MockEmailerMockRecorder) GetBackendDomainName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendDomainName", reflect.TypeOf((*MockEmailer)(nil).GetBackendDomainName))
}

// GetDomainName mocks base method.
func (m *MockEmailer) GetDomainName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDomainName indicates an expected call of GetDomainName.
func (mr *MockEmailerMockRecorder) GetDomainName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainName", reflect.TypeOf((*MockEmailer)(nil).GetDomainName))
}

// GetFrontendDomainName mocks base method.
func (m *MockEmailer) GetFrontendDomainName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFrontendDomainName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFrontendDomainName indicates an expected call of GetFrontendDomainName.
func (mr *MockEmailerMockRecorder) GetFrontendDomainName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFrontendDomainName", reflect.TypeOf((*MockEmailer)(nil).GetFrontendDomainName))
}

// GetMaintenanceEmail mocks base method.
func (m *MockEmailer) GetMaintenanceEmail() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaintenanceEmail")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMaintenanceEmail indicates an expected call of GetMaintenanceEmail.
func (mr *MockEmailerMockRecorder) GetMaintenanceEmail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaintenanceEmail", reflect.TypeOf((*MockEmailer)(nil).GetMaintenanceEmail))
}

// GetSenderEmail mocks base method.
func (m *MockEmailer) GetSenderEmail() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSenderEmail")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSenderEmail indicates an expected call of GetSenderEmail.
func (mr *MockEmailerMockRecorder) GetSenderEmail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSenderEmail", reflect.TypeOf((*MockEmailer)(nil).GetSenderEmail))
}

// Send mocks base method.
func (m *MockEmailer) Send(ctx context.Context, sender, subject, recipient, htmlContent string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, sender, subject, recipient, htmlContent)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockEmailerMockRecorder) Send(ctx, sender, subject, recipient, htmlContent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEmailer)(nil).Send), ctx, sender, subject, recipient, htmlContent)
}
