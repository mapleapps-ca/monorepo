// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/security/jwt/jwt.go
//
// Generated by this command:
//
//	mockgen -source=pkg/security/jwt/jwt.go -destination=pkg/mocks/mock_security_jwt.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockJWTProvider is a mock of JWTProvider interface.
type MockJWTProvider struct {
	ctrl     *gomock.Controller
	recorder *MockJWTProviderMockRecorder
	isgomock struct{}
}

// MockJWTProviderMockRecorder is the mock recorder for MockJWTProvider.
type MockJWTProviderMockRecorder struct {
	mock *MockJWTProvider
}

// NewMockJWTProvider creates a new mock instance.
func NewMockJWTProvider(ctrl *gomock.Controller) *MockJWTProvider {
	mock := &MockJWTProvider{ctrl: ctrl}
	mock.recorder = &MockJWTProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTProvider) EXPECT() *MockJWTProviderMockRecorder {
	return m.recorder
}

// GenerateJWTToken mocks base method.
func (m *MockJWTProvider) GenerateJWTToken(uuid string, ad time.Duration) (string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWTToken", uuid, ad)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateJWTToken indicates an expected call of GenerateJWTToken.
func (mr *MockJWTProviderMockRecorder) GenerateJWTToken(uuid, ad any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWTToken", reflect.TypeOf((*MockJWTProvider)(nil).GenerateJWTToken), uuid, ad)
}

// GenerateJWTTokenPair mocks base method.
func (m *MockJWTProvider) GenerateJWTTokenPair(uuid string, ad, rd time.Duration) (string, time.Time, string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWTTokenPair", uuid, ad, rd)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(time.Time)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GenerateJWTTokenPair indicates an expected call of GenerateJWTTokenPair.
func (mr *MockJWTProviderMockRecorder) GenerateJWTTokenPair(uuid, ad, rd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWTTokenPair", reflect.TypeOf((*MockJWTProvider)(nil).GenerateJWTTokenPair), uuid, ad, rd)
}

// ProcessJWTToken mocks base method.
func (m *MockJWTProvider) ProcessJWTToken(reqToken string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessJWTToken", reqToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessJWTToken indicates an expected call of ProcessJWTToken.
func (mr *MockJWTProviderMockRecorder) ProcessJWTToken(reqToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessJWTToken", reflect.TypeOf((*MockJWTProvider)(nil).ProcessJWTToken), reqToken)
}
