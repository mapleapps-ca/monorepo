// monorepo/native/desktop/maplefile-cli/internal/domain/collectiondto/interface.go
package collectiondto

import (
	"context"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

// CollectionDTORepository defines the interface for interacting with the cloud service
// to manage CollectionDTOs. These DTOs represent encrypted collection data
// exchanged between the local device and the cloud server.
type CollectionDTORepository interface {
	// Upload uploads a CollectionDTO to the cloud service.
	// If collection.ID is zero/empty, a new CollectionDTO will be created on the cloud,
	// a new ID will be generated by the service, assigned to the provided `collection`
	// object, and returned.
	// If collection.ID is non-zero, the existing CollectionDTO with that ID on the cloud
	// will be updated with the provided data.
	// It returns the ID of the uploaded/updated CollectionDTO and an error if the operation fails.
	Upload(ctx context.Context, collection *CollectionDTO) (*primitive.ObjectID, error)

	// DownloadByID downloads a CollectionDTO by its unique identifier from the cloud service.
	// It returns the CollectionDTO if found, or an error if not found or another issue occurs.
	// A specific error (e.g., domain.ErrNotFound) should be returned if the ID does not exist.
	DownloadByID(ctx context.Context, id primitive.ObjectID) (*CollectionDTO, error)

	// List lists CollectionDTOs from the cloud service based on the provided filter criteria.
	// An empty filter should return all accessible CollectionDTOs.
	// It returns a slice of matching CollectionDTOs or an error if the listing fails.
	// The returned slice is guaranteed to be non-nil, even if no collections match the filter (it will be an empty slice).
	List(ctx context.Context, filter CollectionFilter) ([]*CollectionDTO, error)

	// DeleteByID deletes a CollectionDTO by its unique identifier from the cloud service.
	// It returns an error if the deletion fails, for example, if the ID does not exist
	// or due to permissions issues. A specific error (e.g., domain.ErrNotFound)
	// should be returned if the ID does not exist.
	DeleteByID(ctx context.Context, id primitive.ObjectID) error
}

// CollectionFilter defines filtering options for listing CollectionDTOs.
// Fields are optional; an empty filter implies no filtering.
type CollectionFilter struct {
	// ParentID filters collections that are children of the specified ParentID.
	// If nil, collections are not filtered by parent.
	ParentID *primitive.ObjectID `json:"parent_id,omitempty"`
	// Type filters collections by their 'Type' field.
	// If empty, collections are not filtered by type.
	Type string `json:"type,omitempty"`
}
