// monorepo/native/desktop/maplefile-cli/internal/domain/collectiondto/interface.go
package collectiondto

import (
	"context"

	"github.com/gocql/gocql"
)

// CollectionDTORepository defines the interface for interacting with the cloud service
// to manage CollectionDTOs. These DTOs represent encrypted collection data
// exchanged between the local device and the cloud server.
type CollectionDTORepository interface {
	// CreateInCloud creates a new CollectionDTO on the cloud service.
	// A new ID will be generated by the service, assigned to the provided `collection`
	// object, and returned.
	// It returns the ID of the created CollectionDTO and an error if the operation fails.
	CreateInCloud(ctx context.Context, collectionDTO *CollectionDTO) (*gocql.UUID, error)

	// GetFromCloudByID fetches a CollectionDTO by its unique identifier from the cloud service.
	// It returns the CollectionDTO if found, or an error if not found or another issue occurs.
	// A specific error (e.g., domain.ErrNotFound) should be returned if the ID does not exist.
	GetFromCloudByID(ctx context.Context, id gocql.UUID) (*CollectionDTO, error)

	// ListFromCloud lists CollectionDTOs from the cloud service based on the provided filter criteria.
	// An empty filter should return all accessible CollectionDTOs.
	// It returns a slice of matching CollectionDTOs or an error if the listing fails.
	// The returned slice is guaranteed to be non-nil, even if no collections match the filter (it will be an empty slice).
	ListFromCloud(ctx context.Context, filter CollectionFilter) ([]*CollectionDTO, error)

	// DeleteInCloudByID deletes a CollectionDTO by its unique identifier from the cloud service.
	// It returns an error if the deletion fails, for example, if the ID does not exist
	// or due to permissions issues. A specific error (e.g., domain.ErrNotFound)
	// should be returned if the ID does not exist.
	DeleteInCloudByID(ctx context.Context, id gocql.UUID) error

	// GetFilteredCollectionsFromCloud retrieves filtered collections (owned/shared) from the cloud service
	GetFilteredCollectionsFromCloud(ctx context.Context, request *GetFilteredCollectionsRequest) (*GetFilteredCollectionsResponse, error)
}

// GetFilteredCollectionsRequest represents the request for getting filtered collections
type GetFilteredCollectionsRequest struct {
	IncludeOwned  bool `json:"include_owned"`
	IncludeShared bool `json:"include_shared"`
}

// GetFilteredCollectionsResponse represents the response from getting filtered collections
type GetFilteredCollectionsResponse struct {
	OwnedCollections  []*CollectionDTO `json:"owned_collections"`
	SharedCollections []*CollectionDTO `json:"shared_collections"`
	TotalCount        int              `json:"total_count"`
}

// CollectionFilter defines filtering options for listing CollectionDTOs
type CollectionFilter struct {
	// ParentID filters collections that belong to the specified parent collection
	ParentID *gocql.UUID `json:"parent_id,omitempty"`
	// CollectionType filters collections by their type (folder, album)
	CollectionType string `json:"collection_type,omitempty"`
}
