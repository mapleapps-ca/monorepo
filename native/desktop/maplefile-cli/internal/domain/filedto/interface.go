// monorepo/native/desktop/maplefile-cli/internal/domain/filedto/interface.go
package filedto

import (
	"context"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

// FileDTORepository defines the interface for interacting with the cloud service
// to manage FileDTOs. These DTOs represent encrypted file data
// exchanged between the local device and the cloud server.
type FileDTORepository interface {
	// UploadToCloud uploads a FileDTO to the cloud service.
	// If file.ID is zero/empty, a new FileDTO will be created on the cloud,
	// a new ID will be generated by the service, assigned to the provided `file`
	// object, and returned.
	// If file.ID is non-zero, the existing FileDTO with that ID on the cloud
	// will be updated with the provided data.
	// It returns the ID of the uploaded/updated FileDTO and an error if the operation fails.
	UploadToCloud(ctx context.Context, file *FileDTO) (*primitive.ObjectID, error)

	// DownloadByIDFromCloud downloads a FileDTO by its unique identifier from the cloud service.
	// It returns the FileDTO if found, or an error if not found or another issue occurs.
	// A specific error (e.g., domain.ErrNotFound) should be returned if the ID does not exist.
	DownloadByIDFromCloud(ctx context.Context, id primitive.ObjectID) (*FileDTO, error)

	// ListFromCloud lists FileDTOs from the cloud service based on the provided filter criteria.
	// An empty filter should return all accessible FileDTOs.
	// It returns a slice of matching FileDTOs or an error if the listing fails.
	// The returned slice is guaranteed to be non-nil, even if no files match the filter (it will be an empty slice).
	ListFromCloud(ctx context.Context, filter FileFilter) ([]*FileDTO, error)

	// DeleteByIDFromCloud deletes a FileDTO by its unique identifier from the cloud service.
	// It returns an error if the deletion fails, for example, if the ID does not exist
	// or due to permissions issues. A specific error (e.g., domain.ErrNotFound)
	// should be returned if the ID does not exist.
	DeleteByIDFromCloud(ctx context.Context, id primitive.ObjectID) error
}

// FileFilter defines filtering options for listing FileDTOs.
// Fields are optional; an empty filter implies no filtering.
type FileFilter struct {
	// ParentID filters files that are children of the specified ParentID.
	// If nil, files are not filtered by parent.
	ParentID *primitive.ObjectID `json:"parent_id,omitempty"`
	// Type filters files by their 'Type' field.
	// If empty, files are not filtered by type.
	Type string `json:"type,omitempty"`
}
